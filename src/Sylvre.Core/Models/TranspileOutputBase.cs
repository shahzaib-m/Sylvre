using System.Collections.Generic;

namespace Sylvre.Core.Models
{
    /// <summary>
    /// The base class representing a language output from the transpiler.
    /// </summary>
    public abstract class TranspileOutputBase
    {
        /// <summary>
        /// The code generated by a transpiler.
        /// </summary>
        public string TranspiledCode { get; private set; }

        /// <summary>
        /// The collection of all transpile errors that may have been encountered during transpiling.
        /// </summary>
        public ICollection<SylvreTranspileError> TranspileErrors { get; private set; }
        /// <summary>
        /// Returns true if transpile errors were encountered, false otherwise.
        /// </summary>
        public bool HasTranspileErrors
        {
            get { return TranspileErrors.Count != 0; }
        }

        /// <summary>
        /// Initialises an instance of TranspileOutputBase with the given root context and collection of transpile errors.
        /// </summary>
        /// <param name="transpiledCode">The code generated by a transpiler.</param>
        /// <param name="transpileErrors">The collection of transpile errors encountered during transpiling.</param>
        public TranspileOutputBase(string transpiledCode,
            ICollection<SylvreTranspileError> transpileErrors)
        {
            TranspiledCode = transpiledCode;
            TranspileErrors = transpileErrors;
        }
    }
}
