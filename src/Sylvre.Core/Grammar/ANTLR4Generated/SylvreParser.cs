//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./SylvreParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SylvreParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_STRING=1, SINGLE_STRING=2, HASH=3, LEFT_ANGLE_BRACKET=4, RIGHT_ANGLE_BRACKET=5, 
		COMMA=6, FULLSTOP=7, OPEN_PARENTHESIS=8, CLOSE_PARENTHESIS=9, OPEN_SQUARE_BRACKET=10, 
		CLOSE_SQUARE_BRACKET=11, PLUS=12, PLUSEQUALS=13, INCREMENT=14, MINUS=15, 
		MINUSQUALS=16, DECREMENT=17, MULTIPLY=18, MULTIPLYEQUALS=19, DIVIDE=20, 
		DIVIDEDIVIDE=21, DIVIDEEQUALS=22, EQUALSYMBOL=23, USE=24, FILE=25, FUNCTION=26, 
		PARAMS=27, CREATE=28, CALL=29, EXIT=30, WITH=31, IF=32, ELSEIF=33, ELSE=34, 
		LOOPWHILE=35, LOOPFOR=36, AND=37, OR=38, NOT=39, TRUE=40, FALSE=41, GREATER_THAN=42, 
		GREATER_EQUAL=43, LESS_THAN=44, LESS_EQUAL=45, EQUALS=46, IDENTIFIER=47, 
		NUMBER=48, DECIMAL=49, WS=50, COMMENT=51, LINE_COMMENT=52, NEWLINE=53, 
		Unknown=54;
	public const int
		RULE_program = 0, RULE_seperator = 1, RULE_block = 2, RULE_nestable_block = 3, 
		RULE_use_file_statement = 4, RULE_statement_block = 5, RULE_function_block = 6, 
		RULE_if_block = 7, RULE_elseif_block = 8, RULE_else_block = 9, RULE_loopwhile_block = 10, 
		RULE_loopfor_block = 11, RULE_conditional_expression = 12, RULE_comparison_operator = 13, 
		RULE_logical_operator = 14, RULE_bool = 15, RULE_parameters = 16, RULE_arguments = 17, 
		RULE_statement = 18, RULE_declaration = 19, RULE_assignment = 20, RULE_assignment_operator = 21, 
		RULE_array_assignment = 22, RULE_array_elements = 23, RULE_function_call = 24, 
		RULE_function_return = 25, RULE_function_return_value = 26, RULE_expression = 27, 
		RULE_term = 28, RULE_factor = 29, RULE_arithmetic_operator = 30, RULE_string = 31, 
		RULE_variable_reference = 32, RULE_variable_complex_reference = 33, RULE_variable_complex_reference_left = 34, 
		RULE_variable_suffix = 35, RULE_variable_suffix_left = 36, RULE_member_reference = 37, 
		RULE_member_reference_left = 38, RULE_index_reference = 39, RULE_unary_increment = 40, 
		RULE_unary_decrement = 41, RULE_unary_prefix_increment = 42, RULE_unary_prefix_decrement = 43, 
		RULE_unary_suffix_increment = 44, RULE_unary_suffix_decrement = 45;
	public static readonly string[] ruleNames = {
		"program", "seperator", "block", "nestable_block", "use_file_statement", 
		"statement_block", "function_block", "if_block", "elseif_block", "else_block", 
		"loopwhile_block", "loopfor_block", "conditional_expression", "comparison_operator", 
		"logical_operator", "bool", "parameters", "arguments", "statement", "declaration", 
		"assignment", "assignment_operator", "array_assignment", "array_elements", 
		"function_call", "function_return", "function_return_value", "expression", 
		"term", "factor", "arithmetic_operator", "string", "variable_reference", 
		"variable_complex_reference", "variable_complex_reference_left", "variable_suffix", 
		"variable_suffix_left", "member_reference", "member_reference_left", "index_reference", 
		"unary_increment", "unary_decrement", "unary_prefix_increment", "unary_prefix_decrement", 
		"unary_suffix_increment", "unary_suffix_decrement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'<'", "'>'", "','", "'.'", "'('", "')'", "'['", 
		"']'", "'+'", "'+='", "'increment'", "'-'", "'-='", "'decrement'", "'*'", 
		"'*='", "'/'", "'//'", "'/='", "'='", "'USE'", "'FILE'", "'function'", 
		"'PARAMS'", "'create'", "'call'", "'exit'", "'with'", "'if'", "'elseif'", 
		"'else'", "'loopwhile'", "'loopfor'", "'AND'", "'OR'", "'NOT'", "'TRUE'", 
		"'FALSE'", "'GTHAN'", "'GEQUAL'", "'LTHAN'", "'LEQUAL'", "'EQUALS'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_STRING", "SINGLE_STRING", "HASH", "LEFT_ANGLE_BRACKET", 
		"RIGHT_ANGLE_BRACKET", "COMMA", "FULLSTOP", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "PLUS", "PLUSEQUALS", "INCREMENT", 
		"MINUS", "MINUSQUALS", "DECREMENT", "MULTIPLY", "MULTIPLYEQUALS", "DIVIDE", 
		"DIVIDEDIVIDE", "DIVIDEEQUALS", "EQUALSYMBOL", "USE", "FILE", "FUNCTION", 
		"PARAMS", "CREATE", "CALL", "EXIT", "WITH", "IF", "ELSEIF", "ELSE", "LOOPWHILE", 
		"LOOPFOR", "AND", "OR", "NOT", "TRUE", "FALSE", "GREATER_THAN", "GREATER_EQUAL", 
		"LESS_THAN", "LESS_EQUAL", "EQUALS", "IDENTIFIER", "NUMBER", "DECIMAL", 
		"WS", "COMMENT", "LINE_COMMENT", "NEWLINE", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SylvreParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SylvreParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SylvreParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SylvreParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SylvreParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92;
				block();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 140846825619456L) != 0) );
			State = 97;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(SylvreParser.HASH, 0); }
		public SeperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterSeperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitSeperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeperatorContext seperator() {
		SeperatorContext _localctx = new SeperatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Use_file_statementContext use_file_statement() {
			return GetRuleContext<Use_file_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_blockContext function_block() {
			return GetRuleContext<Function_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_blockContext if_block() {
			return GetRuleContext<If_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elseif_blockContext[] elseif_block() {
			return GetRuleContexts<Elseif_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elseif_blockContext elseif_block(int i) {
			return GetRuleContext<Elseif_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loopwhile_blockContext loopwhile_block() {
			return GetRuleContext<Loopwhile_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loopfor_blockContext loopfor_block() {
			return GetRuleContext<Loopfor_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				use_file_statement();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				function_block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103;
				if_block();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ELSEIF) {
					{
					{
					State = 104;
					elseif_block();
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 110;
					else_block();
					}
				}

				}
				break;
			case LOOPWHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113;
				loopwhile_block();
				}
				break;
			case LOOPFOR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114;
				loopfor_block();
				}
				break;
			case INCREMENT:
			case DECREMENT:
			case CREATE:
			case CALL:
			case EXIT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115;
				statement_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nestable_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_blockContext if_block() {
			return GetRuleContext<If_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elseif_blockContext[] elseif_block() {
			return GetRuleContexts<Elseif_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elseif_blockContext elseif_block(int i) {
			return GetRuleContext<Elseif_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loopwhile_blockContext loopwhile_block() {
			return GetRuleContext<Loopwhile_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loopfor_blockContext loopfor_block() {
			return GetRuleContext<Loopfor_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public Nestable_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestable_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterNestable_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitNestable_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestable_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nestable_blockContext nestable_block() {
		Nestable_blockContext _localctx = new Nestable_blockContext(Context, State);
		EnterRule(_localctx, 6, RULE_nestable_block);
		int _la;
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				if_block();
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ELSEIF) {
					{
					{
					State = 119;
					elseif_block();
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 125;
					else_block();
					}
				}

				}
				break;
			case LOOPWHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				loopwhile_block();
				}
				break;
			case LOOPFOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				loopfor_block();
				}
				break;
			case INCREMENT:
			case DECREMENT:
			case CREATE:
			case CALL:
			case EXIT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130;
				statement_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_file_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(SylvreParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(SylvreParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeperatorContext seperator() {
			return GetRuleContext<SeperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_STRING() { return GetToken(SylvreParser.SINGLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_STRING() { return GetToken(SylvreParser.DOUBLE_STRING, 0); }
		public Use_file_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_file_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterUse_file_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitUse_file_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_file_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_file_statementContext use_file_statement() {
		Use_file_statementContext _localctx = new Use_file_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_use_file_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(USE);
			State = 134;
			Match(FILE);
			State = 135;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE_STRING || _la==SINGLE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 136;
			seperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeperatorContext seperator() {
			return GetRuleContext<SeperatorContext>(0);
		}
		public Statement_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterStatement_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitStatement_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_blockContext statement_block() {
		Statement_blockContext _localctx = new Statement_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			statement();
			State = 139;
			seperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SylvreParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMS() { return GetToken(SylvreParser.PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Function_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterFunction_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitFunction_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_blockContext function_block() {
		Function_blockContext _localctx = new Function_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(FUNCTION);
			State = 142;
			variable_reference();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMS) {
				{
				State = 143;
				Match(PARAMS);
				State = 144;
				parameters();
				}
			}

			State = 147;
			Match(LEFT_ANGLE_BRACKET);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140846741733376L) != 0)) {
				{
				{
				State = 148;
				nestable_block();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SylvreParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public If_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterIf_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitIf_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_blockContext if_block() {
		If_blockContext _localctx = new If_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(IF);
			State = 157;
			Match(OPEN_PARENTHESIS);
			State = 158;
			conditional_expression(0);
			State = 159;
			Match(CLOSE_PARENTHESIS);
			State = 160;
			Match(LEFT_ANGLE_BRACKET);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140846741733376L) != 0)) {
				{
				{
				State = 161;
				nestable_block();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elseif_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(SylvreParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Elseif_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterElseif_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitElseif_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elseif_blockContext elseif_block() {
		Elseif_blockContext _localctx = new Elseif_blockContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseif_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(ELSEIF);
			State = 170;
			Match(OPEN_PARENTHESIS);
			State = 171;
			conditional_expression(0);
			State = 172;
			Match(CLOSE_PARENTHESIS);
			State = 173;
			Match(LEFT_ANGLE_BRACKET);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140846741733376L) != 0)) {
				{
				{
				State = 174;
				nestable_block();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SylvreParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 18, RULE_else_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(ELSE);
			State = 183;
			Match(LEFT_ANGLE_BRACKET);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140846741733376L) != 0)) {
				{
				{
				State = 184;
				nestable_block();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loopwhile_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOPWHILE() { return GetToken(SylvreParser.LOOPWHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Loopwhile_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopwhile_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterLoopwhile_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitLoopwhile_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopwhile_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loopwhile_blockContext loopwhile_block() {
		Loopwhile_blockContext _localctx = new Loopwhile_blockContext(Context, State);
		EnterRule(_localctx, 20, RULE_loopwhile_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(LOOPWHILE);
			State = 193;
			Match(OPEN_PARENTHESIS);
			State = 194;
			conditional_expression(0);
			State = 195;
			Match(CLOSE_PARENTHESIS);
			State = 196;
			Match(LEFT_ANGLE_BRACKET);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140846741733376L) != 0)) {
				{
				{
				State = 197;
				nestable_block();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loopfor_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOPFOR() { return GetToken(SylvreParser.LOOPFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeperatorContext[] seperator() {
			return GetRuleContexts<SeperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeperatorContext seperator(int i) {
			return GetRuleContext<SeperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Loopfor_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopfor_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterLoopfor_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitLoopfor_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopfor_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loopfor_blockContext loopfor_block() {
		Loopfor_blockContext _localctx = new Loopfor_blockContext(Context, State);
		EnterRule(_localctx, 22, RULE_loopfor_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(LOOPFOR);
			State = 206;
			Match(OPEN_PARENTHESIS);
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				State = 207;
				declaration();
				}
				break;
			case IDENTIFIER:
				{
				State = 208;
				assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 211;
			seperator();
			State = 212;
			conditional_expression(0);
			State = 213;
			seperator();
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 214;
				assignment();
				}
				break;
			case 2:
				{
				State = 215;
				expression();
				}
				break;
			}
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 218;
				seperator();
				}
			}

			State = 221;
			Match(CLOSE_PARENTHESIS);
			State = 222;
			Match(LEFT_ANGLE_BRACKET);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140846741733376L) != 0)) {
				{
				{
				State = 223;
				nestable_block();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Conditional_expressionContext left;
		public Conditional_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext[] conditional_expression() {
			return GetRuleContexts<Conditional_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression(int i) {
			return GetRuleContext<Conditional_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SylvreParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext logical_operator() {
			return GetRuleContext<Logical_operatorContext>(0);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		return conditional_expression(0);
	}

	private Conditional_expressionContext conditional_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, _parentState);
		Conditional_expressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_conditional_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 232;
				Match(OPEN_PARENTHESIS);
				State = 233;
				conditional_expression(0);
				State = 234;
				Match(CLOSE_PARENTHESIS);
				}
				break;
			case 2:
				{
				State = 236;
				Match(NOT);
				State = 237;
				conditional_expression(4);
				}
				break;
			case 3:
				{
				State = 238;
				expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 251;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 249;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new Conditional_expressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_conditional_expression);
						State = 241;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 242;
						comparison_operator();
						State = 243;
						_localctx.right = conditional_expression(4);
						}
						break;
					case 2:
						{
						_localctx = new Conditional_expressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_conditional_expression);
						State = 245;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 246;
						logical_operator();
						State = 247;
						_localctx.right = conditional_expression(3);
						}
						break;
					}
					} 
				}
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(SylvreParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(SylvreParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(SylvreParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(SylvreParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SylvreParser.EQUALS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 136339441844224L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SylvreParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SylvreParser.OR, 0); }
		public Logical_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_operatorContext logical_operator() {
		Logical_operatorContext _localctx = new Logical_operatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_logical_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SylvreParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SylvreParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 30, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext[] variable_reference() {
			return GetRuleContexts<Variable_referenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext variable_reference(int i) {
			return GetRuleContext<Variable_referenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SylvreParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SylvreParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			variable_reference();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 261;
				Match(COMMA);
				State = 262;
				variable_reference();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext[] conditional_expression() {
			return GetRuleContexts<Conditional_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression(int i) {
			return GetRuleContext<Conditional_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SylvreParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SylvreParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			conditional_expression(0);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 269;
				Match(COMMA);
				State = 270;
				conditional_expression(0);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_returnContext function_return() {
			return GetRuleContext<Function_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_incrementContext unary_increment() {
			return GetRuleContext<Unary_incrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_decrementContext unary_decrement() {
			return GetRuleContext<Unary_decrementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				function_return();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 280;
				unary_increment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 281;
				unary_decrement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SylvreParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALSYMBOL() { return GetToken(SylvreParser.EQUALSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_assignmentContext array_assignment() {
			return GetRuleContext<Array_assignmentContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_declaration);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284;
				Match(CREATE);
				State = 285;
				variable_reference();
				State = 286;
				Match(EQUALSYMBOL);
				State = 287;
				conditional_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				Match(CREATE);
				State = 290;
				variable_reference();
				State = 291;
				Match(EQUALSYMBOL);
				State = 292;
				array_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_complex_reference_leftContext variable_complex_reference_left() {
			return GetRuleContext<Variable_complex_reference_leftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_assignmentContext array_assignment() {
			return GetRuleContext<Array_assignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				variable_complex_reference_left();
				State = 297;
				assignment_operator();
				State = 298;
				conditional_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				variable_complex_reference_left();
				State = 301;
				assignment_operator();
				State = 302;
				array_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALSYMBOL() { return GetToken(SylvreParser.EQUALSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUALS() { return GetToken(SylvreParser.PLUSEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSQUALS() { return GetToken(SylvreParser.MINUSQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLYEQUALS() { return GetToken(SylvreParser.MULTIPLYEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDEEQUALS() { return GetToken(SylvreParser.DIVIDEEQUALS, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 13180928L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(SylvreParser.OPEN_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(SylvreParser.CLOSE_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_elementsContext array_elements() {
			return GetRuleContext<Array_elementsContext>(0);
		}
		public Array_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterArray_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitArray_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_assignmentContext array_assignment() {
		Array_assignmentContext _localctx = new Array_assignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_array_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(OPEN_SQUARE_BRACKET);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 988461490422022L) != 0)) {
				{
				State = 309;
				array_elements();
				}
			}

			State = 312;
			Match(CLOSE_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SylvreParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SylvreParser.COMMA, i);
		}
		public Array_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterArray_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitArray_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_elementsContext array_elements() {
		Array_elementsContext _localctx = new Array_elementsContext(Context, State);
		EnterRule(_localctx, 46, RULE_array_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			expression();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 315;
				Match(COMMA);
				State = 316;
				expression();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SylvreParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 48, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(CALL);
			State = 323;
			variable_complex_reference();
			State = 324;
			Match(OPEN_PARENTHESIS);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 989011246235910L) != 0)) {
				{
				State = 325;
				arguments();
				}
			}

			State = 328;
			Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(SylvreParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_return_valueContext function_return_value() {
			return GetRuleContext<Function_return_valueContext>(0);
		}
		public Function_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterFunction_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitFunction_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_returnContext function_return() {
		Function_returnContext _localctx = new Function_returnContext(Context, State);
		EnterRule(_localctx, 50, RULE_function_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(EXIT);
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 331;
				function_return_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_return_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SylvreParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Function_return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterFunction_return_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitFunction_return_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_return_valueContext function_return_value() {
		Function_return_valueContext _localctx = new Function_return_valueContext(Context, State);
		EnterRule(_localctx, 52, RULE_function_return_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(WITH);
			State = 335;
			conditional_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_operatorContext arithmetic_operator() {
			return GetRuleContext<Arithmetic_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				term();
				State = 338;
				arithmetic_operator();
				State = 339;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_operatorContext arithmetic_operator() {
			return GetRuleContext<Arithmetic_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 56, RULE_term);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344;
				factor();
				State = 345;
				arithmetic_operator();
				State = 346;
				term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SylvreParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SylvreParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(SylvreParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_incrementContext unary_increment() {
			return GetRuleContext<Unary_incrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_decrementContext unary_decrement() {
			return GetRuleContext<Unary_decrementContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 58, RULE_factor);
		int _la;
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351;
				Match(OPEN_PARENTHESIS);
				State = 352;
				expression();
				State = 353;
				Match(CLOSE_PARENTHESIS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 355;
					Match(MINUS);
					}
				}

				State = 358;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 359;
					Match(MINUS);
					}
				}

				State = 362;
				Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 363;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 364;
				variable_complex_reference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 365;
				function_call();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 366;
				@bool();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 367;
				unary_increment();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 368;
				unary_decrement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SylvreParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SylvreParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(SylvreParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SylvreParser.DIVIDE, 0); }
		public Arithmetic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterArithmetic_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitArithmetic_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_operatorContext arithmetic_operator() {
		Arithmetic_operatorContext _localctx = new Arithmetic_operatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_arithmetic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1347584L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_STRING() { return GetToken(SylvreParser.DOUBLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_STRING() { return GetToken(SylvreParser.SINGLE_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 62, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE_STRING || _la==SINGLE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SylvreParser.IDENTIFIER, 0); }
		public Variable_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_referenceContext variable_reference() {
		Variable_referenceContext _localctx = new Variable_referenceContext(Context, State);
		EnterRule(_localctx, 64, RULE_variable_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_complex_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_suffixContext[] variable_suffix() {
			return GetRuleContexts<Variable_suffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_suffixContext variable_suffix(int i) {
			return GetRuleContext<Variable_suffixContext>(i);
		}
		public Variable_complex_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_complex_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterVariable_complex_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitVariable_complex_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_complex_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_complex_referenceContext variable_complex_reference() {
		Variable_complex_referenceContext _localctx = new Variable_complex_referenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_variable_complex_reference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			variable_reference();
			State = 381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 378;
					variable_suffix();
					}
					} 
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_complex_reference_leftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_suffix_leftContext[] variable_suffix_left() {
			return GetRuleContexts<Variable_suffix_leftContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_suffix_leftContext variable_suffix_left(int i) {
			return GetRuleContext<Variable_suffix_leftContext>(i);
		}
		public Variable_complex_reference_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_complex_reference_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterVariable_complex_reference_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitVariable_complex_reference_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_complex_reference_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_complex_reference_leftContext variable_complex_reference_left() {
		Variable_complex_reference_leftContext _localctx = new Variable_complex_reference_leftContext(Context, State);
		EnterRule(_localctx, 68, RULE_variable_complex_reference_left);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			variable_reference();
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FULLSTOP || _la==OPEN_SQUARE_BRACKET) {
				{
				{
				State = 385;
				variable_suffix_left();
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_suffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_referenceContext member_reference() {
			return GetRuleContext<Member_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_referenceContext index_reference() {
			return GetRuleContext<Index_referenceContext>(0);
		}
		public Variable_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterVariable_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitVariable_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_suffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_suffixContext variable_suffix() {
		Variable_suffixContext _localctx = new Variable_suffixContext(Context, State);
		EnterRule(_localctx, 70, RULE_variable_suffix);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULLSTOP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				member_reference();
				}
				break;
			case OPEN_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				index_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_suffix_leftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_reference_leftContext member_reference_left() {
			return GetRuleContext<Member_reference_leftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_referenceContext index_reference() {
			return GetRuleContext<Index_referenceContext>(0);
		}
		public Variable_suffix_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_suffix_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterVariable_suffix_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitVariable_suffix_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_suffix_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_suffix_leftContext variable_suffix_left() {
		Variable_suffix_leftContext _localctx = new Variable_suffix_leftContext(Context, State);
		EnterRule(_localctx, 72, RULE_variable_suffix_left);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULLSTOP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				member_reference_left();
				}
				break;
			case OPEN_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 396;
				index_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLSTOP() { return GetToken(SylvreParser.FULLSTOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Member_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterMember_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitMember_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_referenceContext member_reference() {
		Member_referenceContext _localctx = new Member_referenceContext(Context, State);
		EnterRule(_localctx, 74, RULE_member_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(FULLSTOP);
			State = 402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 400;
				variable_reference();
				}
				break;
			case CALL:
				{
				State = 401;
				function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_reference_leftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLSTOP() { return GetToken(SylvreParser.FULLSTOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Member_reference_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_reference_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterMember_reference_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitMember_reference_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_reference_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_reference_leftContext member_reference_left() {
		Member_reference_leftContext _localctx = new Member_reference_leftContext(Context, State);
		EnterRule(_localctx, 76, RULE_member_reference_left);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(FULLSTOP);
			State = 405;
			variable_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(SylvreParser.OPEN_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(SylvreParser.CLOSE_SQUARE_BRACKET, 0); }
		public Index_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterIndex_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitIndex_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_referenceContext index_reference() {
		Index_referenceContext _localctx = new Index_referenceContext(Context, State);
		EnterRule(_localctx, 78, RULE_index_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(OPEN_SQUARE_BRACKET);
			State = 408;
			expression();
			State = 409;
			Match(CLOSE_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_incrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_prefix_incrementContext unary_prefix_increment() {
			return GetRuleContext<Unary_prefix_incrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_suffix_incrementContext unary_suffix_increment() {
			return GetRuleContext<Unary_suffix_incrementContext>(0);
		}
		public Unary_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_increment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterUnary_increment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitUnary_increment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_incrementContext unary_increment() {
		Unary_incrementContext _localctx = new Unary_incrementContext(Context, State);
		EnterRule(_localctx, 80, RULE_unary_increment);
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411;
				unary_prefix_increment();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				unary_suffix_increment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_decrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_prefix_decrementContext unary_prefix_decrement() {
			return GetRuleContext<Unary_prefix_decrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_suffix_decrementContext unary_suffix_decrement() {
			return GetRuleContext<Unary_suffix_decrementContext>(0);
		}
		public Unary_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_decrement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterUnary_decrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitUnary_decrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_decrementContext unary_decrement() {
		Unary_decrementContext _localctx = new Unary_decrementContext(Context, State);
		EnterRule(_localctx, 82, RULE_unary_decrement);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				unary_prefix_decrement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				unary_suffix_decrement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_prefix_incrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(SylvreParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public Unary_prefix_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_prefix_increment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterUnary_prefix_increment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitUnary_prefix_increment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_prefix_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_prefix_incrementContext unary_prefix_increment() {
		Unary_prefix_incrementContext _localctx = new Unary_prefix_incrementContext(Context, State);
		EnterRule(_localctx, 84, RULE_unary_prefix_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(INCREMENT);
			State = 420;
			variable_complex_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_prefix_decrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(SylvreParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public Unary_prefix_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_prefix_decrement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterUnary_prefix_decrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitUnary_prefix_decrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_prefix_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_prefix_decrementContext unary_prefix_decrement() {
		Unary_prefix_decrementContext _localctx = new Unary_prefix_decrementContext(Context, State);
		EnterRule(_localctx, 86, RULE_unary_prefix_decrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(DECREMENT);
			State = 423;
			variable_complex_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_suffix_incrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(SylvreParser.INCREMENT, 0); }
		public Unary_suffix_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_suffix_increment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterUnary_suffix_increment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitUnary_suffix_increment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_suffix_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_suffix_incrementContext unary_suffix_increment() {
		Unary_suffix_incrementContext _localctx = new Unary_suffix_incrementContext(Context, State);
		EnterRule(_localctx, 88, RULE_unary_suffix_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			variable_complex_reference();
			State = 426;
			Match(INCREMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_suffix_decrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(SylvreParser.DECREMENT, 0); }
		public Unary_suffix_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_suffix_decrement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.EnterUnary_suffix_decrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISylvreParserListener typedListener = listener as ISylvreParserListener;
			if (typedListener != null) typedListener.ExitUnary_suffix_decrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_suffix_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_suffix_decrementContext unary_suffix_decrement() {
		Unary_suffix_decrementContext _localctx = new Unary_suffix_decrementContext(Context, State);
		EnterRule(_localctx, 90, RULE_unary_suffix_decrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			variable_complex_reference();
			State = 429;
			Match(DECREMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return conditional_expression_sempred((Conditional_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool conditional_expression_sempred(Conditional_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,432,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,4,0,94,8,0,11,0,12,0,95,1,0,1,0,1,1,
		1,1,1,2,1,2,1,2,1,2,5,2,106,8,2,10,2,12,2,109,9,2,1,2,3,2,112,8,2,1,2,
		1,2,1,2,3,2,117,8,2,1,3,1,3,5,3,121,8,3,10,3,12,3,124,9,3,1,3,3,3,127,
		8,3,1,3,1,3,1,3,3,3,132,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,3,6,146,8,6,1,6,1,6,5,6,150,8,6,10,6,12,6,153,9,6,1,6,1,6,1,7,1,
		7,1,7,1,7,1,7,1,7,5,7,163,8,7,10,7,12,7,166,9,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,8,1,8,5,8,176,8,8,10,8,12,8,179,9,8,1,8,1,8,1,9,1,9,1,9,5,9,186,8,
		9,10,9,12,9,189,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,199,8,10,
		10,10,12,10,202,9,10,1,10,1,10,1,11,1,11,1,11,1,11,3,11,210,8,11,1,11,
		1,11,1,11,1,11,1,11,3,11,217,8,11,1,11,3,11,220,8,11,1,11,1,11,1,11,5,
		11,225,8,11,10,11,12,11,228,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,3,12,240,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,
		250,8,12,10,12,12,12,253,9,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
		1,16,5,16,264,8,16,10,16,12,16,267,9,16,1,17,1,17,1,17,5,17,272,8,17,10,
		17,12,17,275,9,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,283,8,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,295,8,19,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,3,20,305,8,20,1,21,1,21,1,22,1,22,3,22,311,8,22,
		1,22,1,22,1,23,1,23,1,23,5,23,318,8,23,10,23,12,23,321,9,23,1,24,1,24,
		1,24,1,24,3,24,327,8,24,1,24,1,24,1,25,1,25,3,25,333,8,25,1,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,27,3,27,343,8,27,1,28,1,28,1,28,1,28,1,28,3,28,
		350,8,28,1,29,1,29,1,29,1,29,1,29,3,29,357,8,29,1,29,1,29,3,29,361,8,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,370,8,29,1,30,1,30,1,31,1,31,1,
		32,1,32,1,33,1,33,5,33,380,8,33,10,33,12,33,383,9,33,1,34,1,34,5,34,387,
		8,34,10,34,12,34,390,9,34,1,35,1,35,3,35,394,8,35,1,36,1,36,3,36,398,8,
		36,1,37,1,37,1,37,3,37,403,8,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,
		1,40,3,40,414,8,40,1,41,1,41,3,41,418,8,41,1,42,1,42,1,42,1,43,1,43,1,
		43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,0,1,24,46,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,0,6,1,0,1,2,1,0,42,46,1,0,37,38,
		1,0,40,41,4,0,13,13,16,16,19,19,22,23,4,0,12,12,15,15,18,18,20,20,444,
		0,93,1,0,0,0,2,99,1,0,0,0,4,116,1,0,0,0,6,131,1,0,0,0,8,133,1,0,0,0,10,
		138,1,0,0,0,12,141,1,0,0,0,14,156,1,0,0,0,16,169,1,0,0,0,18,182,1,0,0,
		0,20,192,1,0,0,0,22,205,1,0,0,0,24,239,1,0,0,0,26,254,1,0,0,0,28,256,1,
		0,0,0,30,258,1,0,0,0,32,260,1,0,0,0,34,268,1,0,0,0,36,282,1,0,0,0,38,294,
		1,0,0,0,40,304,1,0,0,0,42,306,1,0,0,0,44,308,1,0,0,0,46,314,1,0,0,0,48,
		322,1,0,0,0,50,330,1,0,0,0,52,334,1,0,0,0,54,342,1,0,0,0,56,349,1,0,0,
		0,58,369,1,0,0,0,60,371,1,0,0,0,62,373,1,0,0,0,64,375,1,0,0,0,66,377,1,
		0,0,0,68,384,1,0,0,0,70,393,1,0,0,0,72,397,1,0,0,0,74,399,1,0,0,0,76,404,
		1,0,0,0,78,407,1,0,0,0,80,413,1,0,0,0,82,417,1,0,0,0,84,419,1,0,0,0,86,
		422,1,0,0,0,88,425,1,0,0,0,90,428,1,0,0,0,92,94,3,4,2,0,93,92,1,0,0,0,
		94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,5,0,0,1,
		98,1,1,0,0,0,99,100,5,3,0,0,100,3,1,0,0,0,101,117,3,8,4,0,102,117,3,12,
		6,0,103,107,3,14,7,0,104,106,3,16,8,0,105,104,1,0,0,0,106,109,1,0,0,0,
		107,105,1,0,0,0,107,108,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,110,112,
		3,18,9,0,111,110,1,0,0,0,111,112,1,0,0,0,112,117,1,0,0,0,113,117,3,20,
		10,0,114,117,3,22,11,0,115,117,3,10,5,0,116,101,1,0,0,0,116,102,1,0,0,
		0,116,103,1,0,0,0,116,113,1,0,0,0,116,114,1,0,0,0,116,115,1,0,0,0,117,
		5,1,0,0,0,118,122,3,14,7,0,119,121,3,16,8,0,120,119,1,0,0,0,121,124,1,
		0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,
		125,127,3,18,9,0,126,125,1,0,0,0,126,127,1,0,0,0,127,132,1,0,0,0,128,132,
		3,20,10,0,129,132,3,22,11,0,130,132,3,10,5,0,131,118,1,0,0,0,131,128,1,
		0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,132,7,1,0,0,0,133,134,5,24,0,0,134,
		135,5,25,0,0,135,136,7,0,0,0,136,137,3,2,1,0,137,9,1,0,0,0,138,139,3,36,
		18,0,139,140,3,2,1,0,140,11,1,0,0,0,141,142,5,26,0,0,142,145,3,64,32,0,
		143,144,5,27,0,0,144,146,3,32,16,0,145,143,1,0,0,0,145,146,1,0,0,0,146,
		147,1,0,0,0,147,151,5,4,0,0,148,150,3,6,3,0,149,148,1,0,0,0,150,153,1,
		0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,
		154,155,5,5,0,0,155,13,1,0,0,0,156,157,5,32,0,0,157,158,5,8,0,0,158,159,
		3,24,12,0,159,160,5,9,0,0,160,164,5,4,0,0,161,163,3,6,3,0,162,161,1,0,
		0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,
		164,1,0,0,0,167,168,5,5,0,0,168,15,1,0,0,0,169,170,5,33,0,0,170,171,5,
		8,0,0,171,172,3,24,12,0,172,173,5,9,0,0,173,177,5,4,0,0,174,176,3,6,3,
		0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
		180,1,0,0,0,179,177,1,0,0,0,180,181,5,5,0,0,181,17,1,0,0,0,182,183,5,34,
		0,0,183,187,5,4,0,0,184,186,3,6,3,0,185,184,1,0,0,0,186,189,1,0,0,0,187,
		185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,191,5,
		5,0,0,191,19,1,0,0,0,192,193,5,35,0,0,193,194,5,8,0,0,194,195,3,24,12,
		0,195,196,5,9,0,0,196,200,5,4,0,0,197,199,3,6,3,0,198,197,1,0,0,0,199,
		202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,
		0,0,0,203,204,5,5,0,0,204,21,1,0,0,0,205,206,5,36,0,0,206,209,5,8,0,0,
		207,210,3,38,19,0,208,210,3,40,20,0,209,207,1,0,0,0,209,208,1,0,0,0,210,
		211,1,0,0,0,211,212,3,2,1,0,212,213,3,24,12,0,213,216,3,2,1,0,214,217,
		3,40,20,0,215,217,3,54,27,0,216,214,1,0,0,0,216,215,1,0,0,0,217,219,1,
		0,0,0,218,220,3,2,1,0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,
		221,222,5,9,0,0,222,226,5,4,0,0,223,225,3,6,3,0,224,223,1,0,0,0,225,228,
		1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,
		0,229,230,5,5,0,0,230,23,1,0,0,0,231,232,6,12,-1,0,232,233,5,8,0,0,233,
		234,3,24,12,0,234,235,5,9,0,0,235,240,1,0,0,0,236,237,5,39,0,0,237,240,
		3,24,12,4,238,240,3,54,27,0,239,231,1,0,0,0,239,236,1,0,0,0,239,238,1,
		0,0,0,240,251,1,0,0,0,241,242,10,3,0,0,242,243,3,26,13,0,243,244,3,24,
		12,4,244,250,1,0,0,0,245,246,10,2,0,0,246,247,3,28,14,0,247,248,3,24,12,
		3,248,250,1,0,0,0,249,241,1,0,0,0,249,245,1,0,0,0,250,253,1,0,0,0,251,
		249,1,0,0,0,251,252,1,0,0,0,252,25,1,0,0,0,253,251,1,0,0,0,254,255,7,1,
		0,0,255,27,1,0,0,0,256,257,7,2,0,0,257,29,1,0,0,0,258,259,7,3,0,0,259,
		31,1,0,0,0,260,265,3,64,32,0,261,262,5,6,0,0,262,264,3,64,32,0,263,261,
		1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,33,1,0,0,0,
		267,265,1,0,0,0,268,273,3,24,12,0,269,270,5,6,0,0,270,272,3,24,12,0,271,
		269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,35,1,0,
		0,0,275,273,1,0,0,0,276,283,3,38,19,0,277,283,3,40,20,0,278,283,3,48,24,
		0,279,283,3,50,25,0,280,283,3,80,40,0,281,283,3,82,41,0,282,276,1,0,0,
		0,282,277,1,0,0,0,282,278,1,0,0,0,282,279,1,0,0,0,282,280,1,0,0,0,282,
		281,1,0,0,0,283,37,1,0,0,0,284,285,5,28,0,0,285,286,3,64,32,0,286,287,
		5,23,0,0,287,288,3,24,12,0,288,295,1,0,0,0,289,290,5,28,0,0,290,291,3,
		64,32,0,291,292,5,23,0,0,292,293,3,44,22,0,293,295,1,0,0,0,294,284,1,0,
		0,0,294,289,1,0,0,0,295,39,1,0,0,0,296,297,3,68,34,0,297,298,3,42,21,0,
		298,299,3,24,12,0,299,305,1,0,0,0,300,301,3,68,34,0,301,302,3,42,21,0,
		302,303,3,44,22,0,303,305,1,0,0,0,304,296,1,0,0,0,304,300,1,0,0,0,305,
		41,1,0,0,0,306,307,7,4,0,0,307,43,1,0,0,0,308,310,5,10,0,0,309,311,3,46,
		23,0,310,309,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,5,11,0,0,
		313,45,1,0,0,0,314,319,3,54,27,0,315,316,5,6,0,0,316,318,3,54,27,0,317,
		315,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,47,1,0,
		0,0,321,319,1,0,0,0,322,323,5,29,0,0,323,324,3,66,33,0,324,326,5,8,0,0,
		325,327,3,34,17,0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,
		329,5,9,0,0,329,49,1,0,0,0,330,332,5,30,0,0,331,333,3,52,26,0,332,331,
		1,0,0,0,332,333,1,0,0,0,333,51,1,0,0,0,334,335,5,31,0,0,335,336,3,24,12,
		0,336,53,1,0,0,0,337,338,3,56,28,0,338,339,3,60,30,0,339,340,3,54,27,0,
		340,343,1,0,0,0,341,343,3,56,28,0,342,337,1,0,0,0,342,341,1,0,0,0,343,
		55,1,0,0,0,344,345,3,58,29,0,345,346,3,60,30,0,346,347,3,56,28,0,347,350,
		1,0,0,0,348,350,3,58,29,0,349,344,1,0,0,0,349,348,1,0,0,0,350,57,1,0,0,
		0,351,352,5,8,0,0,352,353,3,54,27,0,353,354,5,9,0,0,354,370,1,0,0,0,355,
		357,5,15,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,370,5,
		48,0,0,359,361,5,15,0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,
		0,362,370,5,49,0,0,363,370,3,62,31,0,364,370,3,66,33,0,365,370,3,48,24,
		0,366,370,3,30,15,0,367,370,3,80,40,0,368,370,3,82,41,0,369,351,1,0,0,
		0,369,356,1,0,0,0,369,360,1,0,0,0,369,363,1,0,0,0,369,364,1,0,0,0,369,
		365,1,0,0,0,369,366,1,0,0,0,369,367,1,0,0,0,369,368,1,0,0,0,370,59,1,0,
		0,0,371,372,7,5,0,0,372,61,1,0,0,0,373,374,7,0,0,0,374,63,1,0,0,0,375,
		376,5,47,0,0,376,65,1,0,0,0,377,381,3,64,32,0,378,380,3,70,35,0,379,378,
		1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,67,1,0,0,0,
		383,381,1,0,0,0,384,388,3,64,32,0,385,387,3,72,36,0,386,385,1,0,0,0,387,
		390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,69,1,0,0,0,390,388,1,0,
		0,0,391,394,3,74,37,0,392,394,3,78,39,0,393,391,1,0,0,0,393,392,1,0,0,
		0,394,71,1,0,0,0,395,398,3,76,38,0,396,398,3,78,39,0,397,395,1,0,0,0,397,
		396,1,0,0,0,398,73,1,0,0,0,399,402,5,7,0,0,400,403,3,64,32,0,401,403,3,
		48,24,0,402,400,1,0,0,0,402,401,1,0,0,0,403,75,1,0,0,0,404,405,5,7,0,0,
		405,406,3,64,32,0,406,77,1,0,0,0,407,408,5,10,0,0,408,409,3,54,27,0,409,
		410,5,11,0,0,410,79,1,0,0,0,411,414,3,84,42,0,412,414,3,88,44,0,413,411,
		1,0,0,0,413,412,1,0,0,0,414,81,1,0,0,0,415,418,3,86,43,0,416,418,3,90,
		45,0,417,415,1,0,0,0,417,416,1,0,0,0,418,83,1,0,0,0,419,420,5,14,0,0,420,
		421,3,66,33,0,421,85,1,0,0,0,422,423,5,17,0,0,423,424,3,66,33,0,424,87,
		1,0,0,0,425,426,3,66,33,0,426,427,5,14,0,0,427,89,1,0,0,0,428,429,3,66,
		33,0,429,430,5,17,0,0,430,91,1,0,0,0,41,95,107,111,116,122,126,131,145,
		151,164,177,187,200,209,216,219,226,239,249,251,265,273,282,294,304,310,
		319,326,332,342,349,356,360,369,381,388,393,397,402,413,417
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
