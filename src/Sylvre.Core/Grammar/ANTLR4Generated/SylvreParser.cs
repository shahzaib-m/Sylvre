//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\SylvreParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SylvreParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_STRING=1, SINGLE_STRING=2, TEMPLATE_LITERAL=3, HASH=4, LEFT_ANGLE_BRACKET=5, 
		RIGHT_ANGLE_BRACKET=6, COMMA=7, FULLSTOP=8, OPEN_PARENTHESIS=9, CLOSE_PARENTHESIS=10, 
		OPEN_SQUARE_BRACKET=11, CLOSE_SQUARE_BRACKET=12, PLUS=13, PLUSEQUALS=14, 
		INCREMENT=15, MINUS=16, MINUSQUALS=17, DECREMENT=18, MULTIPLY=19, MULTIPLYEQUALS=20, 
		DIVIDE=21, DIVIDEDIVIDE=22, DIVIDEEQUALS=23, EQUALSYMBOL=24, USE=25, FILE=26, 
		FUNCTION=27, PARAMS=28, CREATE=29, CALL=30, EXIT=31, WITH=32, IF=33, ELSEIF=34, 
		ELSE=35, LOOPWHILE=36, LOOPFOR=37, AND=38, OR=39, NOT=40, TRUE=41, FALSE=42, 
		GREATER_THAN=43, GREATER_EQUAL=44, LESS_THAN=45, LESS_EQUAL=46, EQUALS=47, 
		IDENTIFIER=48, NUMBER=49, DECIMAL=50, WS=51, COMMENT=52, LINE_COMMENT=53, 
		NEWLINE=54;
	public const int
		RULE_program = 0, RULE_seperator = 1, RULE_block = 2, RULE_nestable_block = 3, 
		RULE_use_file_statement = 4, RULE_statement_block = 5, RULE_function_block = 6, 
		RULE_if_block = 7, RULE_elseif_block = 8, RULE_else_block = 9, RULE_loopwhile_block = 10, 
		RULE_loopfor_block = 11, RULE_conditional_expression = 12, RULE_comparison_operator = 13, 
		RULE_logical_operator = 14, RULE_bool = 15, RULE_parameters = 16, RULE_arguments = 17, 
		RULE_statement = 18, RULE_declaration = 19, RULE_assignment = 20, RULE_assignment_operator = 21, 
		RULE_array_assignment = 22, RULE_array_elements = 23, RULE_function_call = 24, 
		RULE_function_return = 25, RULE_function_return_value = 26, RULE_expression = 27, 
		RULE_term = 28, RULE_factor = 29, RULE_arithmetic_operator = 30, RULE_string = 31, 
		RULE_variable_reference = 32, RULE_variable_complex_reference = 33, RULE_variable_complex_reference_left = 34, 
		RULE_variable_suffix = 35, RULE_variable_suffix_left = 36, RULE_member_reference = 37, 
		RULE_member_reference_left = 38, RULE_index_reference = 39, RULE_unary_increment = 40, 
		RULE_unary_decrement = 41, RULE_unary_prefix_increment = 42, RULE_unary_prefix_decrement = 43, 
		RULE_unary_suffix_increment = 44, RULE_unary_suffix_decrement = 45;
	public static readonly string[] ruleNames = {
		"program", "seperator", "block", "nestable_block", "use_file_statement", 
		"statement_block", "function_block", "if_block", "elseif_block", "else_block", 
		"loopwhile_block", "loopfor_block", "conditional_expression", "comparison_operator", 
		"logical_operator", "bool", "parameters", "arguments", "statement", "declaration", 
		"assignment", "assignment_operator", "array_assignment", "array_elements", 
		"function_call", "function_return", "function_return_value", "expression", 
		"term", "factor", "arithmetic_operator", "string", "variable_reference", 
		"variable_complex_reference", "variable_complex_reference_left", "variable_suffix", 
		"variable_suffix_left", "member_reference", "member_reference_left", "index_reference", 
		"unary_increment", "unary_decrement", "unary_prefix_increment", "unary_prefix_decrement", 
		"unary_suffix_increment", "unary_suffix_decrement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'#'", "'<'", "'>'", "','", "'.'", "'('", "')'", 
		"'['", "']'", "'+'", "'+='", "'increment'", "'-'", "'-='", "'decrement'", 
		"'*'", "'*='", "'/'", "'//'", "'/='", "'='", "'USE'", "'FILE'", "'function'", 
		"'PARAMS'", "'create'", "'call'", "'exit'", "'with'", "'if'", "'elseif'", 
		"'else'", "'loopwhile'", "'loopfor'", "'AND'", "'OR'", "'NOT'", "'TRUE'", 
		"'FALSE'", "'GTHAN'", "'GEQUAL'", "'LTHAN'", "'LEQUAL'", "'EQUALS'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_STRING", "SINGLE_STRING", "TEMPLATE_LITERAL", "HASH", "LEFT_ANGLE_BRACKET", 
		"RIGHT_ANGLE_BRACKET", "COMMA", "FULLSTOP", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "PLUS", "PLUSEQUALS", "INCREMENT", 
		"MINUS", "MINUSQUALS", "DECREMENT", "MULTIPLY", "MULTIPLYEQUALS", "DIVIDE", 
		"DIVIDEDIVIDE", "DIVIDEEQUALS", "EQUALSYMBOL", "USE", "FILE", "FUNCTION", 
		"PARAMS", "CREATE", "CALL", "EXIT", "WITH", "IF", "ELSEIF", "ELSE", "LOOPWHILE", 
		"LOOPFOR", "AND", "OR", "NOT", "TRUE", "FALSE", "GREATER_THAN", "GREATER_EQUAL", 
		"LESS_THAN", "LESS_EQUAL", "EQUALS", "IDENTIFIER", "NUMBER", "DECIMAL", 
		"WS", "COMMENT", "LINE_COMMENT", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SylvreParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SylvreParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SylvreParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SylvreParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SylvreParser.Eof, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92; block();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << USE) | (1L << FUNCTION) | (1L << CREATE) | (1L << CALL) | (1L << EXIT) | (1L << IF) | (1L << LOOPWHILE) | (1L << LOOPFOR) | (1L << IDENTIFIER))) != 0) );
			State = 97; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeperatorContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(SylvreParser.HASH, 0); }
		public SeperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeperatorContext seperator() {
		SeperatorContext _localctx = new SeperatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public Use_file_statementContext use_file_statement() {
			return GetRuleContext<Use_file_statementContext>(0);
		}
		public Function_blockContext function_block() {
			return GetRuleContext<Function_blockContext>(0);
		}
		public If_blockContext if_block() {
			return GetRuleContext<If_blockContext>(0);
		}
		public Elseif_blockContext[] elseif_block() {
			return GetRuleContexts<Elseif_blockContext>();
		}
		public Elseif_blockContext elseif_block(int i) {
			return GetRuleContext<Elseif_blockContext>(i);
		}
		public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Loopwhile_blockContext loopwhile_block() {
			return GetRuleContext<Loopwhile_blockContext>(0);
		}
		public Loopfor_blockContext loopfor_block() {
			return GetRuleContext<Loopfor_blockContext>(0);
		}
		public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101; use_file_statement();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; function_block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103; if_block();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ELSEIF) {
					{
					{
					State = 104; elseif_block();
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 110; else_block();
					}
				}

				}
				break;
			case LOOPWHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; loopwhile_block();
				}
				break;
			case LOOPFOR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; loopfor_block();
				}
				break;
			case INCREMENT:
			case DECREMENT:
			case CREATE:
			case CALL:
			case EXIT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115; statement_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nestable_blockContext : ParserRuleContext {
		public If_blockContext if_block() {
			return GetRuleContext<If_blockContext>(0);
		}
		public Elseif_blockContext[] elseif_block() {
			return GetRuleContexts<Elseif_blockContext>();
		}
		public Elseif_blockContext elseif_block(int i) {
			return GetRuleContext<Elseif_blockContext>(i);
		}
		public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Loopwhile_blockContext loopwhile_block() {
			return GetRuleContext<Loopwhile_blockContext>(0);
		}
		public Loopfor_blockContext loopfor_block() {
			return GetRuleContext<Loopfor_blockContext>(0);
		}
		public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public Nestable_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestable_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestable_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nestable_blockContext nestable_block() {
		Nestable_blockContext _localctx = new Nestable_blockContext(Context, State);
		EnterRule(_localctx, 6, RULE_nestable_block);
		int _la;
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; if_block();
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ELSEIF) {
					{
					{
					State = 119; elseif_block();
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 125; else_block();
					}
				}

				}
				break;
			case LOOPWHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128; loopwhile_block();
				}
				break;
			case LOOPFOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; loopfor_block();
				}
				break;
			case INCREMENT:
			case DECREMENT:
			case CREATE:
			case CALL:
			case EXIT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130; statement_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_file_statementContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(SylvreParser.USE, 0); }
		public ITerminalNode FILE() { return GetToken(SylvreParser.FILE, 0); }
		public SeperatorContext seperator() {
			return GetRuleContext<SeperatorContext>(0);
		}
		public ITerminalNode SINGLE_STRING() { return GetToken(SylvreParser.SINGLE_STRING, 0); }
		public ITerminalNode DOUBLE_STRING() { return GetToken(SylvreParser.DOUBLE_STRING, 0); }
		public Use_file_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_file_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_file_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_file_statementContext use_file_statement() {
		Use_file_statementContext _localctx = new Use_file_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_use_file_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(USE);
			State = 134; Match(FILE);
			State = 135;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE_STRING || _la==SINGLE_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 136; seperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_blockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SeperatorContext seperator() {
			return GetRuleContext<SeperatorContext>(0);
		}
		public Statement_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_blockContext statement_block() {
		Statement_blockContext _localctx = new Statement_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; statement();
			State = 139; seperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_blockContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(SylvreParser.FUNCTION, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		public ITerminalNode PARAMS() { return GetToken(SylvreParser.PARAMS, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Function_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_blockContext function_block() {
		Function_blockContext _localctx = new Function_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(FUNCTION);
			State = 142; variable_reference();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMS) {
				{
				State = 143; Match(PARAMS);
				State = 144; parameters();
				}
			}

			State = 147; Match(LEFT_ANGLE_BRACKET);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << CREATE) | (1L << CALL) | (1L << EXIT) | (1L << IF) | (1L << LOOPWHILE) | (1L << LOOPFOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 148; nestable_block();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154; Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_blockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(SylvreParser.IF, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public If_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_blockContext if_block() {
		If_blockContext _localctx = new If_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(IF);
			State = 157; Match(OPEN_PARENTHESIS);
			State = 158; conditional_expression(0);
			State = 159; Match(CLOSE_PARENTHESIS);
			State = 160; Match(LEFT_ANGLE_BRACKET);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << CREATE) | (1L << CALL) | (1L << EXIT) | (1L << IF) | (1L << LOOPWHILE) | (1L << LOOPFOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 161; nestable_block();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167; Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elseif_blockContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(SylvreParser.ELSEIF, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Elseif_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elseif_blockContext elseif_block() {
		Elseif_blockContext _localctx = new Elseif_blockContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseif_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(ELSEIF);
			State = 170; Match(OPEN_PARENTHESIS);
			State = 171; conditional_expression(0);
			State = 172; Match(CLOSE_PARENTHESIS);
			State = 173; Match(LEFT_ANGLE_BRACKET);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << CREATE) | (1L << CALL) | (1L << EXIT) | (1L << IF) | (1L << LOOPWHILE) | (1L << LOOPFOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 174; nestable_block();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180; Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(SylvreParser.ELSE, 0); }
		public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 18, RULE_else_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(ELSE);
			State = 183; Match(LEFT_ANGLE_BRACKET);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << CREATE) | (1L << CALL) | (1L << EXIT) | (1L << IF) | (1L << LOOPWHILE) | (1L << LOOPFOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 184; nestable_block();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190; Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loopwhile_blockContext : ParserRuleContext {
		public ITerminalNode LOOPWHILE() { return GetToken(SylvreParser.LOOPWHILE, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Loopwhile_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopwhile_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopwhile_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loopwhile_blockContext loopwhile_block() {
		Loopwhile_blockContext _localctx = new Loopwhile_blockContext(Context, State);
		EnterRule(_localctx, 20, RULE_loopwhile_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(LOOPWHILE);
			State = 193; Match(OPEN_PARENTHESIS);
			State = 194; conditional_expression(0);
			State = 195; Match(CLOSE_PARENTHESIS);
			State = 196; Match(LEFT_ANGLE_BRACKET);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << CREATE) | (1L << CALL) | (1L << EXIT) | (1L << IF) | (1L << LOOPWHILE) | (1L << LOOPFOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 197; nestable_block();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203; Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loopfor_blockContext : ParserRuleContext {
		public ITerminalNode LOOPFOR() { return GetToken(SylvreParser.LOOPFOR, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		public SeperatorContext[] seperator() {
			return GetRuleContexts<SeperatorContext>();
		}
		public SeperatorContext seperator(int i) {
			return GetRuleContext<SeperatorContext>(i);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(SylvreParser.LEFT_ANGLE_BRACKET, 0); }
		public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(SylvreParser.RIGHT_ANGLE_BRACKET, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Nestable_blockContext[] nestable_block() {
			return GetRuleContexts<Nestable_blockContext>();
		}
		public Nestable_blockContext nestable_block(int i) {
			return GetRuleContext<Nestable_blockContext>(i);
		}
		public Loopfor_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopfor_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopfor_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loopfor_blockContext loopfor_block() {
		Loopfor_blockContext _localctx = new Loopfor_blockContext(Context, State);
		EnterRule(_localctx, 22, RULE_loopfor_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(LOOPFOR);
			State = 206; Match(OPEN_PARENTHESIS);
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				State = 207; declaration();
				}
				break;
			case IDENTIFIER:
				{
				State = 208; assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 211; seperator();
			State = 212; conditional_expression(0);
			State = 213; seperator();
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 214; assignment();
				}
				break;
			case 2:
				{
				State = 215; expression();
				}
				break;
			}
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 218; seperator();
				}
			}

			State = 221; Match(CLOSE_PARENTHESIS);
			State = 222; Match(LEFT_ANGLE_BRACKET);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << CREATE) | (1L << CALL) | (1L << EXIT) | (1L << IF) | (1L << LOOPWHILE) | (1L << LOOPFOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 223; nestable_block();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229; Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Conditional_expressionContext left;
		public Conditional_expressionContext right;
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		public Conditional_expressionContext[] conditional_expression() {
			return GetRuleContexts<Conditional_expressionContext>();
		}
		public Conditional_expressionContext conditional_expression(int i) {
			return GetRuleContext<Conditional_expressionContext>(i);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode NOT() { return GetToken(SylvreParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Logical_operatorContext logical_operator() {
			return GetRuleContext<Logical_operatorContext>(0);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		return conditional_expression(0);
	}

	private Conditional_expressionContext conditional_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, _parentState);
		Conditional_expressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_conditional_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 232; Match(OPEN_PARENTHESIS);
				State = 233; conditional_expression(0);
				State = 234; Match(CLOSE_PARENTHESIS);
				}
				break;
			case 2:
				{
				State = 236; Match(NOT);
				State = 237; conditional_expression(4);
				}
				break;
			case 3:
				{
				State = 238; expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 251;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 249;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new Conditional_expressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_conditional_expression);
						State = 241;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 242; comparison_operator();
						State = 243; _localctx.right = conditional_expression(4);
						}
						break;
					case 2:
						{
						_localctx = new Conditional_expressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_conditional_expression);
						State = 245;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 246; logical_operator();
						State = 247; _localctx.right = conditional_expression(3);
						}
						break;
					}
					} 
				}
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode GREATER_THAN() { return GetToken(SylvreParser.GREATER_THAN, 0); }
		public ITerminalNode GREATER_EQUAL() { return GetToken(SylvreParser.GREATER_EQUAL, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(SylvreParser.LESS_THAN, 0); }
		public ITerminalNode LESS_EQUAL() { return GetToken(SylvreParser.LESS_EQUAL, 0); }
		public ITerminalNode EQUALS() { return GetToken(SylvreParser.EQUALS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATER_THAN) | (1L << GREATER_EQUAL) | (1L << LESS_THAN) | (1L << LESS_EQUAL) | (1L << EQUALS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_operatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(SylvreParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SylvreParser.OR, 0); }
		public Logical_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_operatorContext logical_operator() {
		Logical_operatorContext _localctx = new Logical_operatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_logical_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(SylvreParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(SylvreParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 30, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public Variable_referenceContext[] variable_reference() {
			return GetRuleContexts<Variable_referenceContext>();
		}
		public Variable_referenceContext variable_reference(int i) {
			return GetRuleContext<Variable_referenceContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SylvreParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SylvreParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; variable_reference();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 261; Match(COMMA);
				State = 262; variable_reference();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public Conditional_expressionContext[] conditional_expression() {
			return GetRuleContexts<Conditional_expressionContext>();
		}
		public Conditional_expressionContext conditional_expression(int i) {
			return GetRuleContext<Conditional_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SylvreParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SylvreParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; conditional_expression(0);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 269; Match(COMMA);
				State = 270; conditional_expression(0);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Function_returnContext function_return() {
			return GetRuleContext<Function_returnContext>(0);
		}
		public Unary_incrementContext unary_increment() {
			return GetRuleContext<Unary_incrementContext>(0);
		}
		public Unary_decrementContext unary_decrement() {
			return GetRuleContext<Unary_decrementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278; function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279; function_return();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 280; unary_increment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 281; unary_decrement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(SylvreParser.CREATE, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Array_assignmentContext array_assignment() {
			return GetRuleContext<Array_assignmentContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_declaration);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; Match(CREATE);
				State = 285; variable_reference();
				State = 286; assignment_operator();
				State = 287; conditional_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; Match(CREATE);
				State = 290; variable_reference();
				State = 291; assignment_operator();
				State = 292; array_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Variable_complex_reference_leftContext variable_complex_reference_left() {
			return GetRuleContext<Variable_complex_reference_leftContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Array_assignmentContext array_assignment() {
			return GetRuleContext<Array_assignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; variable_complex_reference_left();
				State = 297; assignment_operator();
				State = 298; conditional_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; variable_complex_reference_left();
				State = 301; assignment_operator();
				State = 302; array_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode EQUALSYMBOL() { return GetToken(SylvreParser.EQUALSYMBOL, 0); }
		public ITerminalNode PLUSEQUALS() { return GetToken(SylvreParser.PLUSEQUALS, 0); }
		public ITerminalNode MINUSQUALS() { return GetToken(SylvreParser.MINUSQUALS, 0); }
		public ITerminalNode MULTIPLYEQUALS() { return GetToken(SylvreParser.MULTIPLYEQUALS, 0); }
		public ITerminalNode DIVIDEEQUALS() { return GetToken(SylvreParser.DIVIDEEQUALS, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUSEQUALS) | (1L << MINUSQUALS) | (1L << MULTIPLYEQUALS) | (1L << DIVIDEEQUALS) | (1L << EQUALSYMBOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_assignmentContext : ParserRuleContext {
		public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(SylvreParser.OPEN_SQUARE_BRACKET, 0); }
		public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(SylvreParser.CLOSE_SQUARE_BRACKET, 0); }
		public Array_elementsContext array_elements() {
			return GetRuleContext<Array_elementsContext>(0);
		}
		public Array_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_assignmentContext array_assignment() {
		Array_assignmentContext _localctx = new Array_assignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_array_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(OPEN_SQUARE_BRACKET);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_STRING) | (1L << SINGLE_STRING) | (1L << TEMPLATE_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << INCREMENT) | (1L << MINUS) | (1L << DECREMENT) | (1L << CALL) | (1L << TRUE) | (1L << FALSE) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << DECIMAL))) != 0)) {
				{
				State = 309; array_elements();
				}
			}

			State = 312; Match(CLOSE_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elementsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SylvreParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SylvreParser.COMMA, i);
		}
		public Array_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_elementsContext array_elements() {
		Array_elementsContext _localctx = new Array_elementsContext(Context, State);
		EnterRule(_localctx, 46, RULE_array_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; expression();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 315; Match(COMMA);
				State = 316; expression();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(SylvreParser.CALL, 0); }
		public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 48, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(CALL);
			State = 323; variable_complex_reference();
			State = 324; Match(OPEN_PARENTHESIS);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_STRING) | (1L << SINGLE_STRING) | (1L << TEMPLATE_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << INCREMENT) | (1L << MINUS) | (1L << DECREMENT) | (1L << CALL) | (1L << NOT) | (1L << TRUE) | (1L << FALSE) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << DECIMAL))) != 0)) {
				{
				State = 325; arguments();
				}
			}

			State = 328; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_returnContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(SylvreParser.EXIT, 0); }
		public Function_return_valueContext function_return_value() {
			return GetRuleContext<Function_return_valueContext>(0);
		}
		public Function_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_returnContext function_return() {
		Function_returnContext _localctx = new Function_returnContext(Context, State);
		EnterRule(_localctx, 50, RULE_function_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(EXIT);
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 331; function_return_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_return_valueContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(SylvreParser.WITH, 0); }
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Function_return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_return_valueContext function_return_value() {
		Function_return_valueContext _localctx = new Function_return_valueContext(Context, State);
		EnterRule(_localctx, 52, RULE_function_return_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(WITH);
			State = 335; conditional_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Arithmetic_operatorContext arithmetic_operator() {
			return GetRuleContext<Arithmetic_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; term();
				State = 338; arithmetic_operator();
				State = 339; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341; term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public Arithmetic_operatorContext arithmetic_operator() {
			return GetRuleContext<Arithmetic_operatorContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 56, RULE_term);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; factor();
				State = 345; arithmetic_operator();
				State = 346; term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348; factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(SylvreParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(SylvreParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode NUMBER() { return GetToken(SylvreParser.NUMBER, 0); }
		public ITerminalNode MINUS() { return GetToken(SylvreParser.MINUS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SylvreParser.DECIMAL, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public Unary_incrementContext unary_increment() {
			return GetRuleContext<Unary_incrementContext>(0);
		}
		public Unary_decrementContext unary_decrement() {
			return GetRuleContext<Unary_decrementContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 58, RULE_factor);
		int _la;
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351; Match(OPEN_PARENTHESIS);
				State = 352; expression();
				State = 353; Match(CLOSE_PARENTHESIS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 355; Match(MINUS);
					}
				}

				State = 358; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 359; Match(MINUS);
					}
				}

				State = 362; Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 363; @string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 364; variable_complex_reference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 365; function_call();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 366; @bool();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 367; unary_increment();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 368; unary_decrement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(SylvreParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SylvreParser.MINUS, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(SylvreParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(SylvreParser.DIVIDE, 0); }
		public Arithmetic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_operatorContext arithmetic_operator() {
		Arithmetic_operatorContext _localctx = new Arithmetic_operatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_arithmetic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << DIVIDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode DOUBLE_STRING() { return GetToken(SylvreParser.DOUBLE_STRING, 0); }
		public ITerminalNode SINGLE_STRING() { return GetToken(SylvreParser.SINGLE_STRING, 0); }
		public ITerminalNode TEMPLATE_LITERAL() { return GetToken(SylvreParser.TEMPLATE_LITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 62, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_STRING) | (1L << SINGLE_STRING) | (1L << TEMPLATE_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_referenceContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SylvreParser.IDENTIFIER, 0); }
		public Variable_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_reference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_referenceContext variable_reference() {
		Variable_referenceContext _localctx = new Variable_referenceContext(Context, State);
		EnterRule(_localctx, 64, RULE_variable_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_complex_referenceContext : ParserRuleContext {
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Variable_suffixContext[] variable_suffix() {
			return GetRuleContexts<Variable_suffixContext>();
		}
		public Variable_suffixContext variable_suffix(int i) {
			return GetRuleContext<Variable_suffixContext>(i);
		}
		public Variable_complex_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_complex_reference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_complex_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_complex_referenceContext variable_complex_reference() {
		Variable_complex_referenceContext _localctx = new Variable_complex_referenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_variable_complex_reference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; variable_reference();
			State = 381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 378; variable_suffix();
					}
					} 
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_complex_reference_leftContext : ParserRuleContext {
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Variable_suffix_leftContext[] variable_suffix_left() {
			return GetRuleContexts<Variable_suffix_leftContext>();
		}
		public Variable_suffix_leftContext variable_suffix_left(int i) {
			return GetRuleContext<Variable_suffix_leftContext>(i);
		}
		public Variable_complex_reference_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_complex_reference_left; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_complex_reference_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_complex_reference_leftContext variable_complex_reference_left() {
		Variable_complex_reference_leftContext _localctx = new Variable_complex_reference_leftContext(Context, State);
		EnterRule(_localctx, 68, RULE_variable_complex_reference_left);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; variable_reference();
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FULLSTOP || _la==OPEN_SQUARE_BRACKET) {
				{
				{
				State = 385; variable_suffix_left();
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_suffixContext : ParserRuleContext {
		public Member_referenceContext member_reference() {
			return GetRuleContext<Member_referenceContext>(0);
		}
		public Index_referenceContext index_reference() {
			return GetRuleContext<Index_referenceContext>(0);
		}
		public Variable_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_suffix; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_suffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_suffixContext variable_suffix() {
		Variable_suffixContext _localctx = new Variable_suffixContext(Context, State);
		EnterRule(_localctx, 70, RULE_variable_suffix);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULLSTOP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391; member_reference();
				}
				break;
			case OPEN_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392; index_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_suffix_leftContext : ParserRuleContext {
		public Member_reference_leftContext member_reference_left() {
			return GetRuleContext<Member_reference_leftContext>(0);
		}
		public Index_referenceContext index_reference() {
			return GetRuleContext<Index_referenceContext>(0);
		}
		public Variable_suffix_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_suffix_left; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_suffix_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_suffix_leftContext variable_suffix_left() {
		Variable_suffix_leftContext _localctx = new Variable_suffix_leftContext(Context, State);
		EnterRule(_localctx, 72, RULE_variable_suffix_left);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULLSTOP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; member_reference_left();
				}
				break;
			case OPEN_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 396; index_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_referenceContext : ParserRuleContext {
		public ITerminalNode FULLSTOP() { return GetToken(SylvreParser.FULLSTOP, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Member_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_reference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_referenceContext member_reference() {
		Member_referenceContext _localctx = new Member_referenceContext(Context, State);
		EnterRule(_localctx, 74, RULE_member_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(FULLSTOP);
			State = 402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 400; variable_reference();
				}
				break;
			case CALL:
				{
				State = 401; function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_reference_leftContext : ParserRuleContext {
		public ITerminalNode FULLSTOP() { return GetToken(SylvreParser.FULLSTOP, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Member_reference_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_reference_left; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_reference_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_reference_leftContext member_reference_left() {
		Member_reference_leftContext _localctx = new Member_reference_leftContext(Context, State);
		EnterRule(_localctx, 76, RULE_member_reference_left);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(FULLSTOP);
			State = 405; variable_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_referenceContext : ParserRuleContext {
		public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(SylvreParser.OPEN_SQUARE_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(SylvreParser.CLOSE_SQUARE_BRACKET, 0); }
		public Index_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_reference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_referenceContext index_reference() {
		Index_referenceContext _localctx = new Index_referenceContext(Context, State);
		EnterRule(_localctx, 78, RULE_index_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(OPEN_SQUARE_BRACKET);
			State = 408; expression();
			State = 409; Match(CLOSE_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_incrementContext : ParserRuleContext {
		public Unary_prefix_incrementContext unary_prefix_increment() {
			return GetRuleContext<Unary_prefix_incrementContext>(0);
		}
		public Unary_suffix_incrementContext unary_suffix_increment() {
			return GetRuleContext<Unary_suffix_incrementContext>(0);
		}
		public Unary_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_incrementContext unary_increment() {
		Unary_incrementContext _localctx = new Unary_incrementContext(Context, State);
		EnterRule(_localctx, 80, RULE_unary_increment);
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411; unary_prefix_increment();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412; unary_suffix_increment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_decrementContext : ParserRuleContext {
		public Unary_prefix_decrementContext unary_prefix_decrement() {
			return GetRuleContext<Unary_prefix_decrementContext>(0);
		}
		public Unary_suffix_decrementContext unary_suffix_decrement() {
			return GetRuleContext<Unary_suffix_decrementContext>(0);
		}
		public Unary_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_decrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_decrementContext unary_decrement() {
		Unary_decrementContext _localctx = new Unary_decrementContext(Context, State);
		EnterRule(_localctx, 82, RULE_unary_decrement);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415; unary_prefix_decrement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; unary_suffix_decrement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_prefix_incrementContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(SylvreParser.INCREMENT, 0); }
		public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public Unary_prefix_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_prefix_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_prefix_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_prefix_incrementContext unary_prefix_increment() {
		Unary_prefix_incrementContext _localctx = new Unary_prefix_incrementContext(Context, State);
		EnterRule(_localctx, 84, RULE_unary_prefix_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(INCREMENT);
			State = 420; variable_complex_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_prefix_decrementContext : ParserRuleContext {
		public ITerminalNode DECREMENT() { return GetToken(SylvreParser.DECREMENT, 0); }
		public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public Unary_prefix_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_prefix_decrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_prefix_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_prefix_decrementContext unary_prefix_decrement() {
		Unary_prefix_decrementContext _localctx = new Unary_prefix_decrementContext(Context, State);
		EnterRule(_localctx, 86, RULE_unary_prefix_decrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(DECREMENT);
			State = 423; variable_complex_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_suffix_incrementContext : ParserRuleContext {
		public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public ITerminalNode INCREMENT() { return GetToken(SylvreParser.INCREMENT, 0); }
		public Unary_suffix_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_suffix_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_suffix_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_suffix_incrementContext unary_suffix_increment() {
		Unary_suffix_incrementContext _localctx = new Unary_suffix_incrementContext(Context, State);
		EnterRule(_localctx, 88, RULE_unary_suffix_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; variable_complex_reference();
			State = 426; Match(INCREMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_suffix_decrementContext : ParserRuleContext {
		public Variable_complex_referenceContext variable_complex_reference() {
			return GetRuleContext<Variable_complex_referenceContext>(0);
		}
		public ITerminalNode DECREMENT() { return GetToken(SylvreParser.DECREMENT, 0); }
		public Unary_suffix_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_suffix_decrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISylvreParserVisitor<TResult> typedVisitor = visitor as ISylvreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_suffix_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_suffix_decrementContext unary_suffix_decrement() {
		Unary_suffix_decrementContext _localctx = new Unary_suffix_decrementContext(Context, State);
		EnterRule(_localctx, 90, RULE_unary_suffix_decrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; variable_complex_reference();
			State = 429; Match(DECREMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return conditional_expression_sempred((Conditional_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool conditional_expression_sempred(Conditional_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x38', '\x1B2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x3', '\x2', '\x6', '\x2', '`', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x61', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'l', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', 'o', '\v', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'r', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'w', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '{', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '~', '\v', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x81', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x86', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x94', '\n', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x98', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\x9B', '\v', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '\xA5', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\xA8', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xB2', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xB5', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xBC', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xBF', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', '\xC9', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\xCC', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xD4', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xDB', '\n', '\r', '\x3', '\r', '\x5', '\r', '\xDE', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xE3', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xE6', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xF2', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xFC', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xFF', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x10A', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x10D', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\a', '\x13', '\x112', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\x115', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x11D', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x129', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x133', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x139', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\a', '\x19', '\x140', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x143', 
		'\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x149', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x14F', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x159', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x160', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x167', '\n', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x16B', '\n', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x174', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\a', '#', '\x17E', '\n', '#', '\f', '#', '\xE', '#', '\x181', '\v', 
		'#', '\x3', '$', '\x3', '$', '\a', '$', '\x185', '\n', '$', '\f', '$', 
		'\xE', '$', '\x188', '\v', '$', '\x3', '%', '\x3', '%', '\x5', '%', '\x18C', 
		'\n', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x190', '\n', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x195', '\n', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', '*', '\x3', '*', '\x5', '*', '\x1A0', '\n', '*', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x1A4', '\n', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x2', '\x3', '\x1A', 
		'\x30', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '\x2', '\t', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '-', 
		'\x31', '\x3', '\x2', '(', ')', '\x3', '\x2', '+', ',', '\x6', '\x2', 
		'\x10', '\x10', '\x13', '\x13', '\x16', '\x16', '\x19', '\x1A', '\x6', 
		'\x2', '\xF', '\xF', '\x12', '\x12', '\x15', '\x15', '\x17', '\x17', '\x3', 
		'\x2', '\x3', '\x5', '\x2', '\x1BE', '\x2', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x65', '\x3', '\x2', '\x2', '\x2', '\x6', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x85', '\x3', '\x2', '\x2', '\x2', '\n', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x10', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x100', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x102', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x106', '\x3', '\x2', '\x2', '\x2', '$', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x11C', '\x3', '\x2', '\x2', '\x2', '(', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x132', '\x3', '\x2', '\x2', '\x2', 
		',', '\x134', '\x3', '\x2', '\x2', '\x2', '.', '\x136', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x32', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x150', '\x3', '\x2', '\x2', '\x2', '\x38', '\x158', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x15F', '\x3', '\x2', '\x2', '\x2', '<', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x177', '\x3', '\x2', '\x2', '\x2', '\x42', '\x179', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x46', '\x182', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x18F', '\x3', '\x2', '\x2', '\x2', 'L', '\x191', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x196', '\x3', '\x2', '\x2', '\x2', 'P', '\x199', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1A3', '\x3', '\x2', '\x2', '\x2', 'V', '\x1A5', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x1A8', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'^', '`', '\x5', '\x6', '\x4', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\x2', '\x2', '\x3', '\x64', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x6', '\x2', 
		'\x2', '\x66', '\x5', '\x3', '\x2', '\x2', '\x2', 'g', 'w', '\x5', '\n', 
		'\x6', '\x2', 'h', 'w', '\x5', '\xE', '\b', '\x2', 'i', 'm', '\x5', '\x10', 
		'\t', '\x2', 'j', 'l', '\x5', '\x12', '\n', '\x2', 'k', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'r', '\x5', '\x14', 
		'\v', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'w', '\x3', '\x2', '\x2', '\x2', 's', 'w', '\x5', '\x16', 
		'\f', '\x2', 't', 'w', '\x5', '\x18', '\r', '\x2', 'u', 'w', '\x5', '\f', 
		'\a', '\x2', 'v', 'g', '\x3', '\x2', '\x2', '\x2', 'v', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'i', '\x3', '\x2', '\x2', '\x2', 'v', 's', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\a', '\x3', '\x2', '\x2', '\x2', 'x', '|', '\x5', 
		'\x10', '\t', '\x2', 'y', '{', '\x5', '\x12', '\n', '\x2', 'z', 'y', '\x3', 
		'\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x81', '\x5', '\x14', '\v', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x86', '\x5', '\x16', '\f', '\x2', '\x83', 
		'\x86', '\x5', '\x18', '\r', '\x2', '\x84', '\x86', '\x5', '\f', '\a', 
		'\x2', '\x85', 'x', '\x3', '\x2', '\x2', '\x2', '\x85', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x1B', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\x1C', '\x2', '\x2', '\x89', '\x8A', '\t', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\x5', '\x4', '\x3', '\x2', '\x8B', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\x5', '&', '\x14', '\x2', '\x8D', '\x8E', '\x5', 
		'\x4', '\x3', '\x2', '\x8E', '\r', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '\x1D', '\x2', '\x2', '\x90', '\x93', '\x5', '\x42', '\"', 
		'\x2', '\x91', '\x92', '\a', '\x1E', '\x2', '\x2', '\x92', '\x94', '\x5', 
		'\"', '\x12', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x99', '\a', '\a', '\x2', '\x2', '\x96', '\x98', '\x5', 
		'\b', '\x5', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '\b', '\x2', '\x2', '\x9D', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '#', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\v', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\x1A', '\xE', '\x2', '\xA1', 
		'\xA2', '\a', '\f', '\x2', '\x2', '\xA2', '\xA6', '\a', '\a', '\x2', '\x2', 
		'\xA3', '\xA5', '\x5', '\b', '\x5', '\x2', '\xA4', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\a', '\b', '\x2', '\x2', '\xAA', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '$', '\x2', '\x2', '\xAC', 
		'\xAD', '\a', '\v', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x1A', '\xE', 
		'\x2', '\xAE', '\xAF', '\a', '\f', '\x2', '\x2', '\xAF', '\xB3', '\a', 
		'\a', '\x2', '\x2', '\xB0', '\xB2', '\x5', '\b', '\x5', '\x2', '\xB1', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\b', '\x2', 
		'\x2', '\xB7', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', 
		'%', '\x2', '\x2', '\xB9', '\xBD', '\a', '\a', '\x2', '\x2', '\xBA', '\xBC', 
		'\x5', '\b', '\x5', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xC1', '\a', '\b', '\x2', '\x2', '\xC1', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\a', '&', '\x2', '\x2', '\xC3', '\xC4', 
		'\a', '\v', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x1A', '\xE', '\x2', 
		'\xC5', '\xC6', '\a', '\f', '\x2', '\x2', '\xC6', '\xCA', '\a', '\a', 
		'\x2', '\x2', '\xC7', '\xC9', '\x5', '\b', '\x5', '\x2', '\xC8', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\b', '\x2', '\x2', 
		'\xCE', '\x17', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', '\'', 
		'\x2', '\x2', '\xD0', '\xD3', '\a', '\v', '\x2', '\x2', '\xD1', '\xD4', 
		'\x5', '(', '\x15', '\x2', '\xD2', '\xD4', '\x5', '*', '\x16', '\x2', 
		'\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', 
		'\x5', '\x4', '\x3', '\x2', '\xD6', '\xD7', '\x5', '\x1A', '\xE', '\x2', 
		'\xD7', '\xDA', '\x5', '\x4', '\x3', '\x2', '\xD8', '\xDB', '\x5', '*', 
		'\x16', '\x2', '\xD9', '\xDB', '\x5', '\x38', '\x1D', '\x2', '\xDA', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\x4', 
		'\x3', '\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE0', '\a', '\f', '\x2', '\x2', '\xE0', '\xE4', '\a', '\a', 
		'\x2', '\x2', '\xE1', '\xE3', '\x5', '\b', '\x5', '\x2', '\xE2', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', '\b', '\x2', '\x2', 
		'\xE8', '\x19', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\b', '\xE', 
		'\x1', '\x2', '\xEA', '\xEB', '\a', '\v', '\x2', '\x2', '\xEB', '\xEC', 
		'\x5', '\x1A', '\xE', '\x2', '\xEC', '\xED', '\a', '\f', '\x2', '\x2', 
		'\xED', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '*', 
		'\x2', '\x2', '\xEF', '\xF2', '\x5', '\x1A', '\xE', '\x6', '\xF0', '\xF2', 
		'\x5', '\x38', '\x1D', '\x2', '\xF1', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', 
		'\f', '\x5', '\x2', '\x2', '\xF4', '\xF5', '\x5', '\x1C', '\xF', '\x2', 
		'\xF5', '\xF6', '\x5', '\x1A', '\xE', '\x6', '\xF6', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF8', '\f', '\x4', '\x2', '\x2', '\xF8', '\xF9', 
		'\x5', '\x1E', '\x10', '\x2', '\xF9', '\xFA', '\x5', '\x1A', '\xE', '\x5', 
		'\xFA', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\t', '\x3', '\x2', '\x2', '\x101', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\t', '\x4', '\x2', '\x2', '\x103', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '\x105', '\t', '\x5', '\x2', '\x2', '\x105', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x10B', '\x5', '\x42', '\"', '\x2', 
		'\x107', '\x108', '\a', '\t', '\x2', '\x2', '\x108', '\x10A', '\x5', '\x42', 
		'\"', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x113', 
		'\x5', '\x1A', '\xE', '\x2', '\x10F', '\x110', '\a', '\t', '\x2', '\x2', 
		'\x110', '\x112', '\x5', '\x1A', '\xE', '\x2', '\x111', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x115', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '%', '\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x11D', '\x5', '(', '\x15', '\x2', '\x117', 
		'\x11D', '\x5', '*', '\x16', '\x2', '\x118', '\x11D', '\x5', '\x32', '\x1A', 
		'\x2', '\x119', '\x11D', '\x5', '\x34', '\x1B', '\x2', '\x11A', '\x11D', 
		'\x5', 'R', '*', '\x2', '\x11B', '\x11D', '\x5', 'T', '+', '\x2', '\x11C', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x11E', '\x11F', '\a', '\x1F', '\x2', '\x2', '\x11F', '\x120', 
		'\x5', '\x42', '\"', '\x2', '\x120', '\x121', '\x5', ',', '\x17', '\x2', 
		'\x121', '\x122', '\x5', '\x1A', '\xE', '\x2', '\x122', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x1F', '\x2', '\x2', '\x124', 
		'\x125', '\x5', '\x42', '\"', '\x2', '\x125', '\x126', '\x5', ',', '\x17', 
		'\x2', '\x126', '\x127', '\x5', '.', '\x18', '\x2', '\x127', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x123', '\x3', '\x2', '\x2', '\x2', '\x129', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x12A', '\x12B', '\x5', '\x46', '$', '\x2', '\x12B', '\x12C', 
		'\x5', ',', '\x17', '\x2', '\x12C', '\x12D', '\x5', '\x1A', '\xE', '\x2', 
		'\x12D', '\x133', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x5', 
		'\x46', '$', '\x2', '\x12F', '\x130', '\x5', ',', '\x17', '\x2', '\x130', 
		'\x131', '\x5', '.', '\x18', '\x2', '\x131', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x132', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\t', '\x6', '\x2', '\x2', '\x135', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x136', '\x138', '\a', '\r', '\x2', '\x2', '\x137', '\x139', 
		'\x5', '\x30', '\x19', '\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\xE', '\x2', '\x2', '\x13B', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x141', '\x5', '\x38', '\x1D', 
		'\x2', '\x13D', '\x13E', '\a', '\t', '\x2', '\x2', '\x13E', '\x140', '\x5', 
		'\x38', '\x1D', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\a', ' ', '\x2', '\x2', '\x145', '\x146', '\x5', '\x44', 
		'#', '\x2', '\x146', '\x148', '\a', '\v', '\x2', '\x2', '\x147', '\x149', 
		'\x5', '$', '\x13', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', '\f', '\x2', '\x2', '\x14B', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\a', '!', '\x2', 
		'\x2', '\x14D', '\x14F', '\x5', '\x36', '\x1C', '\x2', '\x14E', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x35', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\a', '\"', 
		'\x2', '\x2', '\x151', '\x152', '\x5', '\x1A', '\xE', '\x2', '\x152', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\x5', ':', '\x1E', 
		'\x2', '\x154', '\x155', '\x5', '>', ' ', '\x2', '\x155', '\x156', '\x5', 
		'\x38', '\x1D', '\x2', '\x156', '\x159', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x159', '\x5', ':', '\x1E', '\x2', '\x158', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x5', '<', '\x1F', '\x2', 
		'\x15B', '\x15C', '\x5', '>', ' ', '\x2', '\x15C', '\x15D', '\x5', ':', 
		'\x1E', '\x2', '\x15D', '\x160', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x160', '\x5', '<', '\x1F', '\x2', '\x15F', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x160', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\v', '\x2', '\x2', '\x162', 
		'\x163', '\x5', '\x38', '\x1D', '\x2', '\x163', '\x164', '\a', '\f', '\x2', 
		'\x2', '\x164', '\x174', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', 
		'\a', '\x12', '\x2', '\x2', '\x166', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x167', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x174', '\a', '\x33', '\x2', '\x2', '\x169', 
		'\x16B', '\a', '\x12', '\x2', '\x2', '\x16A', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x174', '\a', '\x34', '\x2', '\x2', 
		'\x16D', '\x174', '\x5', '@', '!', '\x2', '\x16E', '\x174', '\x5', '\x44', 
		'#', '\x2', '\x16F', '\x174', '\x5', '\x32', '\x1A', '\x2', '\x170', '\x174', 
		'\x5', ' ', '\x11', '\x2', '\x171', '\x174', '\x5', 'R', '*', '\x2', '\x172', 
		'\x174', '\x5', 'T', '+', '\x2', '\x173', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x166', '\x3', '\x2', '\x2', '\x2', '\x173', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x173', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x170', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '=', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\t', 
		'\a', '\x2', '\x2', '\x176', '?', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x178', '\t', '\b', '\x2', '\x2', '\x178', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17A', '\a', '\x32', '\x2', '\x2', '\x17A', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17F', '\x5', '\x42', '\"', '\x2', 
		'\x17C', '\x17E', '\x5', 'H', '%', '\x2', '\x17D', '\x17C', '\x3', '\x2', 
		'\x2', '\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x45', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x186', '\x5', '\x42', '\"', '\x2', '\x183', 
		'\x185', '\x5', 'J', '&', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x188', '\x3', '\x2', '\x2', '\x2', '\x186', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x187', 'G', '\x3', '\x2', '\x2', '\x2', '\x188', '\x186', '\x3', '\x2', 
		'\x2', '\x2', '\x189', '\x18C', '\x5', 'L', '\'', '\x2', '\x18A', '\x18C', 
		'\x5', 'P', ')', '\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18C', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x18D', '\x190', '\x5', 'N', '(', '\x2', '\x18E', '\x190', 
		'\x5', 'P', ')', '\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x191', '\x194', '\a', '\n', '\x2', '\x2', '\x192', '\x195', 
		'\x5', '\x42', '\"', '\x2', '\x193', '\x195', '\x5', '\x32', '\x1A', '\x2', 
		'\x194', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x195', 'M', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x197', '\a', '\n', '\x2', '\x2', '\x197', '\x198', '\x5', '\x42', '\"', 
		'\x2', '\x198', 'O', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', 
		'\r', '\x2', '\x2', '\x19A', '\x19B', '\x5', '\x38', '\x1D', '\x2', '\x19B', 
		'\x19C', '\a', '\xE', '\x2', '\x2', '\x19C', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x1A0', '\x5', 'V', ',', '\x2', '\x19E', '\x1A0', '\x5', 
		'Z', '.', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A4', '\x5', 'X', '-', '\x2', '\x1A2', '\x1A4', '\x5', 
		'\\', '/', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A4', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1A5', '\x1A6', '\a', '\x11', '\x2', '\x2', '\x1A6', '\x1A7', 
		'\x5', '\x44', '#', '\x2', '\x1A7', 'W', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A9', '\a', '\x14', '\x2', '\x2', '\x1A9', '\x1AA', '\x5', '\x44', 
		'#', '\x2', '\x1AA', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', 
		'\x5', '\x44', '#', '\x2', '\x1AC', '\x1AD', '\a', '\x11', '\x2', '\x2', 
		'\x1AD', '[', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x5', '\x44', 
		'#', '\x2', '\x1AF', '\x1B0', '\a', '\x14', '\x2', '\x2', '\x1B0', ']', 
		'\x3', '\x2', '\x2', '\x2', '+', '\x61', 'm', 'q', 'v', '|', '\x80', '\x85', 
		'\x93', '\x99', '\xA6', '\xB3', '\xBD', '\xCA', '\xD3', '\xDA', '\xDD', 
		'\xE4', '\xF1', '\xFB', '\xFD', '\x10B', '\x113', '\x11C', '\x128', '\x132', 
		'\x138', '\x141', '\x148', '\x14E', '\x158', '\x15F', '\x166', '\x16A', 
		'\x173', '\x17F', '\x186', '\x18B', '\x18F', '\x194', '\x19F', '\x1A3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
