//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./SylvreLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SylvreLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_STRING=1, SINGLE_STRING=2, HASH=3, LEFT_ANGLE_BRACKET=4, RIGHT_ANGLE_BRACKET=5, 
		COMMA=6, FULLSTOP=7, OPEN_PARENTHESIS=8, CLOSE_PARENTHESIS=9, OPEN_SQUARE_BRACKET=10, 
		CLOSE_SQUARE_BRACKET=11, PLUS=12, PLUSEQUALS=13, INCREMENT=14, MINUS=15, 
		MINUSQUALS=16, DECREMENT=17, MULTIPLY=18, MULTIPLYEQUALS=19, DIVIDE=20, 
		DIVIDEDIVIDE=21, DIVIDEEQUALS=22, EQUALSYMBOL=23, USE=24, FILE=25, FUNCTION=26, 
		PARAMS=27, CREATE=28, CALL=29, EXIT=30, WITH=31, IF=32, ELSEIF=33, ELSE=34, 
		LOOPWHILE=35, LOOPFOR=36, AND=37, OR=38, NOT=39, TRUE=40, FALSE=41, GREATER_THAN=42, 
		GREATER_EQUAL=43, LESS_THAN=44, LESS_EQUAL=45, EQUALS=46, IDENTIFIER=47, 
		NUMBER=48, DECIMAL=49, WS=50, COMMENT=51, LINE_COMMENT=52, NEWLINE=53, 
		Unknown=54;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOUBLE_STRING", "SINGLE_STRING", "HASH", "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", 
		"COMMA", "FULLSTOP", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "OPEN_SQUARE_BRACKET", 
		"CLOSE_SQUARE_BRACKET", "PLUS", "PLUSEQUALS", "INCREMENT", "MINUS", "MINUSQUALS", 
		"DECREMENT", "MULTIPLY", "MULTIPLYEQUALS", "DIVIDE", "DIVIDEDIVIDE", "DIVIDEEQUALS", 
		"EQUALSYMBOL", "USE", "FILE", "FUNCTION", "PARAMS", "CREATE", "CALL", 
		"EXIT", "WITH", "IF", "ELSEIF", "ELSE", "LOOPWHILE", "LOOPFOR", "AND", 
		"OR", "NOT", "TRUE", "FALSE", "GREATER_THAN", "GREATER_EQUAL", "LESS_THAN", 
		"LESS_EQUAL", "EQUALS", "IDENTIFIER", "Digit", "NUMBER", "DECIMAL", "WS", 
		"COMMENT", "LINE_COMMENT", "NEWLINE", "Unknown"
	};


	public SylvreLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SylvreLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'<'", "'>'", "','", "'.'", "'('", "')'", "'['", 
		"']'", "'+'", "'+='", "'increment'", "'-'", "'-='", "'decrement'", "'*'", 
		"'*='", "'/'", "'//'", "'/='", "'='", "'USE'", "'FILE'", "'function'", 
		"'PARAMS'", "'create'", "'call'", "'exit'", "'with'", "'if'", "'elseif'", 
		"'else'", "'loopwhile'", "'loopfor'", "'AND'", "'OR'", "'NOT'", "'TRUE'", 
		"'FALSE'", "'GTHAN'", "'GEQUAL'", "'LTHAN'", "'LEQUAL'", "'EQUALS'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_STRING", "SINGLE_STRING", "HASH", "LEFT_ANGLE_BRACKET", 
		"RIGHT_ANGLE_BRACKET", "COMMA", "FULLSTOP", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "PLUS", "PLUSEQUALS", "INCREMENT", 
		"MINUS", "MINUSQUALS", "DECREMENT", "MULTIPLY", "MULTIPLYEQUALS", "DIVIDE", 
		"DIVIDEDIVIDE", "DIVIDEEQUALS", "EQUALSYMBOL", "USE", "FILE", "FUNCTION", 
		"PARAMS", "CREATE", "CALL", "EXIT", "WITH", "IF", "ELSEIF", "ELSE", "LOOPWHILE", 
		"LOOPFOR", "AND", "OR", "NOT", "TRUE", "FALSE", "GREATER_THAN", "GREATER_EQUAL", 
		"LESS_THAN", "LESS_EQUAL", "EQUALS", "IDENTIFIER", "NUMBER", "DECIMAL", 
		"WS", "COMMENT", "LINE_COMMENT", "NEWLINE", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SylvreLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SylvreLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,54,397,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,
		5,0,116,8,0,10,0,12,0,119,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,127,8,1,10,1,
		12,1,130,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,
		20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,
		24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
		26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,
		31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,
		38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,
		41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,
		43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,
		45,1,45,1,45,1,46,1,46,5,46,334,8,46,10,46,12,46,337,9,46,1,47,1,47,1,
		48,4,48,342,8,48,11,48,12,48,343,1,49,4,49,347,8,49,11,49,12,49,348,1,
		49,1,49,4,49,353,8,49,11,49,12,49,354,1,50,4,50,358,8,50,11,50,12,50,359,
		1,50,1,50,1,51,1,51,1,51,1,51,5,51,368,8,51,10,51,12,51,371,9,51,1,51,
		1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,382,8,52,10,52,12,52,385,
		9,52,1,52,1,52,1,53,3,53,390,8,53,1,53,1,53,1,53,1,53,1,54,1,54,1,369,
		0,55,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,0,97,48,99,
		49,101,50,103,51,105,52,107,53,109,54,1,0,7,3,0,10,10,13,13,34,34,3,0,
		10,10,13,13,39,39,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
		57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,407,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
		0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,1,111,1,0,0,0,3,122,1,0,0,0,5,133,1,
		0,0,0,7,135,1,0,0,0,9,137,1,0,0,0,11,139,1,0,0,0,13,141,1,0,0,0,15,143,
		1,0,0,0,17,145,1,0,0,0,19,147,1,0,0,0,21,149,1,0,0,0,23,151,1,0,0,0,25,
		153,1,0,0,0,27,156,1,0,0,0,29,166,1,0,0,0,31,168,1,0,0,0,33,171,1,0,0,
		0,35,181,1,0,0,0,37,183,1,0,0,0,39,186,1,0,0,0,41,188,1,0,0,0,43,191,1,
		0,0,0,45,194,1,0,0,0,47,196,1,0,0,0,49,200,1,0,0,0,51,205,1,0,0,0,53,214,
		1,0,0,0,55,221,1,0,0,0,57,228,1,0,0,0,59,233,1,0,0,0,61,238,1,0,0,0,63,
		243,1,0,0,0,65,246,1,0,0,0,67,253,1,0,0,0,69,258,1,0,0,0,71,268,1,0,0,
		0,73,276,1,0,0,0,75,280,1,0,0,0,77,283,1,0,0,0,79,287,1,0,0,0,81,292,1,
		0,0,0,83,298,1,0,0,0,85,304,1,0,0,0,87,311,1,0,0,0,89,317,1,0,0,0,91,324,
		1,0,0,0,93,331,1,0,0,0,95,338,1,0,0,0,97,341,1,0,0,0,99,346,1,0,0,0,101,
		357,1,0,0,0,103,363,1,0,0,0,105,377,1,0,0,0,107,389,1,0,0,0,109,395,1,
		0,0,0,111,117,5,34,0,0,112,113,5,92,0,0,113,116,5,34,0,0,114,116,8,0,0,
		0,115,112,1,0,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,
		118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,34,0,0,121,2,1,0,
		0,0,122,128,5,39,0,0,123,124,5,92,0,0,124,127,5,39,0,0,125,127,8,1,0,0,
		126,123,1,0,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,
		1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,132,5,39,0,0,132,4,1,0,0,0,
		133,134,5,35,0,0,134,6,1,0,0,0,135,136,5,60,0,0,136,8,1,0,0,0,137,138,
		5,62,0,0,138,10,1,0,0,0,139,140,5,44,0,0,140,12,1,0,0,0,141,142,5,46,0,
		0,142,14,1,0,0,0,143,144,5,40,0,0,144,16,1,0,0,0,145,146,5,41,0,0,146,
		18,1,0,0,0,147,148,5,91,0,0,148,20,1,0,0,0,149,150,5,93,0,0,150,22,1,0,
		0,0,151,152,5,43,0,0,152,24,1,0,0,0,153,154,5,43,0,0,154,155,5,61,0,0,
		155,26,1,0,0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,99,0,0,159,
		160,5,114,0,0,160,161,5,101,0,0,161,162,5,109,0,0,162,163,5,101,0,0,163,
		164,5,110,0,0,164,165,5,116,0,0,165,28,1,0,0,0,166,167,5,45,0,0,167,30,
		1,0,0,0,168,169,5,45,0,0,169,170,5,61,0,0,170,32,1,0,0,0,171,172,5,100,
		0,0,172,173,5,101,0,0,173,174,5,99,0,0,174,175,5,114,0,0,175,176,5,101,
		0,0,176,177,5,109,0,0,177,178,5,101,0,0,178,179,5,110,0,0,179,180,5,116,
		0,0,180,34,1,0,0,0,181,182,5,42,0,0,182,36,1,0,0,0,183,184,5,42,0,0,184,
		185,5,61,0,0,185,38,1,0,0,0,186,187,5,47,0,0,187,40,1,0,0,0,188,189,5,
		47,0,0,189,190,5,47,0,0,190,42,1,0,0,0,191,192,5,47,0,0,192,193,5,61,0,
		0,193,44,1,0,0,0,194,195,5,61,0,0,195,46,1,0,0,0,196,197,5,85,0,0,197,
		198,5,83,0,0,198,199,5,69,0,0,199,48,1,0,0,0,200,201,5,70,0,0,201,202,
		5,73,0,0,202,203,5,76,0,0,203,204,5,69,0,0,204,50,1,0,0,0,205,206,5,102,
		0,0,206,207,5,117,0,0,207,208,5,110,0,0,208,209,5,99,0,0,209,210,5,116,
		0,0,210,211,5,105,0,0,211,212,5,111,0,0,212,213,5,110,0,0,213,52,1,0,0,
		0,214,215,5,80,0,0,215,216,5,65,0,0,216,217,5,82,0,0,217,218,5,65,0,0,
		218,219,5,77,0,0,219,220,5,83,0,0,220,54,1,0,0,0,221,222,5,99,0,0,222,
		223,5,114,0,0,223,224,5,101,0,0,224,225,5,97,0,0,225,226,5,116,0,0,226,
		227,5,101,0,0,227,56,1,0,0,0,228,229,5,99,0,0,229,230,5,97,0,0,230,231,
		5,108,0,0,231,232,5,108,0,0,232,58,1,0,0,0,233,234,5,101,0,0,234,235,5,
		120,0,0,235,236,5,105,0,0,236,237,5,116,0,0,237,60,1,0,0,0,238,239,5,119,
		0,0,239,240,5,105,0,0,240,241,5,116,0,0,241,242,5,104,0,0,242,62,1,0,0,
		0,243,244,5,105,0,0,244,245,5,102,0,0,245,64,1,0,0,0,246,247,5,101,0,0,
		247,248,5,108,0,0,248,249,5,115,0,0,249,250,5,101,0,0,250,251,5,105,0,
		0,251,252,5,102,0,0,252,66,1,0,0,0,253,254,5,101,0,0,254,255,5,108,0,0,
		255,256,5,115,0,0,256,257,5,101,0,0,257,68,1,0,0,0,258,259,5,108,0,0,259,
		260,5,111,0,0,260,261,5,111,0,0,261,262,5,112,0,0,262,263,5,119,0,0,263,
		264,5,104,0,0,264,265,5,105,0,0,265,266,5,108,0,0,266,267,5,101,0,0,267,
		70,1,0,0,0,268,269,5,108,0,0,269,270,5,111,0,0,270,271,5,111,0,0,271,272,
		5,112,0,0,272,273,5,102,0,0,273,274,5,111,0,0,274,275,5,114,0,0,275,72,
		1,0,0,0,276,277,5,65,0,0,277,278,5,78,0,0,278,279,5,68,0,0,279,74,1,0,
		0,0,280,281,5,79,0,0,281,282,5,82,0,0,282,76,1,0,0,0,283,284,5,78,0,0,
		284,285,5,79,0,0,285,286,5,84,0,0,286,78,1,0,0,0,287,288,5,84,0,0,288,
		289,5,82,0,0,289,290,5,85,0,0,290,291,5,69,0,0,291,80,1,0,0,0,292,293,
		5,70,0,0,293,294,5,65,0,0,294,295,5,76,0,0,295,296,5,83,0,0,296,297,5,
		69,0,0,297,82,1,0,0,0,298,299,5,71,0,0,299,300,5,84,0,0,300,301,5,72,0,
		0,301,302,5,65,0,0,302,303,5,78,0,0,303,84,1,0,0,0,304,305,5,71,0,0,305,
		306,5,69,0,0,306,307,5,81,0,0,307,308,5,85,0,0,308,309,5,65,0,0,309,310,
		5,76,0,0,310,86,1,0,0,0,311,312,5,76,0,0,312,313,5,84,0,0,313,314,5,72,
		0,0,314,315,5,65,0,0,315,316,5,78,0,0,316,88,1,0,0,0,317,318,5,76,0,0,
		318,319,5,69,0,0,319,320,5,81,0,0,320,321,5,85,0,0,321,322,5,65,0,0,322,
		323,5,76,0,0,323,90,1,0,0,0,324,325,5,69,0,0,325,326,5,81,0,0,326,327,
		5,85,0,0,327,328,5,65,0,0,328,329,5,76,0,0,329,330,5,83,0,0,330,92,1,0,
		0,0,331,335,7,2,0,0,332,334,7,3,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,
		333,1,0,0,0,335,336,1,0,0,0,336,94,1,0,0,0,337,335,1,0,0,0,338,339,7,4,
		0,0,339,96,1,0,0,0,340,342,3,95,47,0,341,340,1,0,0,0,342,343,1,0,0,0,343,
		341,1,0,0,0,343,344,1,0,0,0,344,98,1,0,0,0,345,347,3,95,47,0,346,345,1,
		0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,
		350,352,5,46,0,0,351,353,3,95,47,0,352,351,1,0,0,0,353,354,1,0,0,0,354,
		352,1,0,0,0,354,355,1,0,0,0,355,100,1,0,0,0,356,358,7,5,0,0,357,356,1,
		0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,
		361,362,6,50,0,0,362,102,1,0,0,0,363,364,5,47,0,0,364,365,5,42,0,0,365,
		369,1,0,0,0,366,368,9,0,0,0,367,366,1,0,0,0,368,371,1,0,0,0,369,370,1,
		0,0,0,369,367,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,5,42,0,0,
		373,374,5,47,0,0,374,375,1,0,0,0,375,376,6,51,1,0,376,104,1,0,0,0,377,
		378,5,47,0,0,378,379,5,47,0,0,379,383,1,0,0,0,380,382,8,6,0,0,381,380,
		1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,
		0,385,383,1,0,0,0,386,387,6,52,1,0,387,106,1,0,0,0,388,390,5,13,0,0,389,
		388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,5,10,0,0,392,393,1,
		0,0,0,393,394,6,53,1,0,394,108,1,0,0,0,395,396,9,0,0,0,396,110,1,0,0,0,
		13,0,115,117,126,128,335,343,348,354,359,369,383,389,2,0,1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
